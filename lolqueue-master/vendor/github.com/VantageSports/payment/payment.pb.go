// Code generated by protoc-gen-go.
// source: payment.proto
// DO NOT EDIT!

/*
Package payment is a generated protocol buffer package.

It is generated from these files:
	payment.proto

It has these top-level messages:
	SimpleResponse
	CustomerRequest
	PurchaseRequest
	SubscriptionRequest
	PaymentSourceRequest
	PaymentSourcesList
	PaymentSource
	Card
	ProductsList
	Product
	PaymentSourceFilter
	ProductFilter
	StripeEvent
	SubscriptionsListRequest
	SubscriptionsList
	Subscription
*/
package payment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SimpleResponse struct {
}

func (m *SimpleResponse) Reset()                    { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string            { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()               {}
func (*SimpleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CustomerRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CouponId string `protobuf:"bytes,2,opt,name=coupon_id,json=couponId" json:"coupon_id,omitempty"`
}

func (m *CustomerRequest) Reset()                    { *m = CustomerRequest{} }
func (m *CustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomerRequest) ProtoMessage()               {}
func (*CustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CustomerRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CustomerRequest) GetCouponId() string {
	if m != nil {
		return m.CouponId
	}
	return ""
}

type PurchaseRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SkuId  string `protobuf:"bytes,2,opt,name=sku_id,json=skuId" json:"sku_id,omitempty"`
}

func (m *PurchaseRequest) Reset()                    { *m = PurchaseRequest{} }
func (m *PurchaseRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseRequest) ProtoMessage()               {}
func (*PurchaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PurchaseRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *PurchaseRequest) GetSkuId() string {
	if m != nil {
		return m.SkuId
	}
	return ""
}

type SubscriptionRequest struct {
	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Plan        string `protobuf:"bytes,2,opt,name=plan" json:"plan,omitempty"`
	AtPeriodEnd bool   `protobuf:"varint,3,opt,name=at_period_end,json=atPeriodEnd" json:"at_period_end,omitempty"`
	CouponId    string `protobuf:"bytes,4,opt,name=coupon_id,json=couponId" json:"coupon_id,omitempty"`
}

func (m *SubscriptionRequest) Reset()                    { *m = SubscriptionRequest{} }
func (m *SubscriptionRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionRequest) ProtoMessage()               {}
func (*SubscriptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubscriptionRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SubscriptionRequest) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

func (m *SubscriptionRequest) GetAtPeriodEnd() bool {
	if m != nil {
		return m.AtPeriodEnd
	}
	return false
}

func (m *SubscriptionRequest) GetCouponId() string {
	if m != nil {
		return m.CouponId
	}
	return ""
}

type PaymentSourceRequest struct {
	// token obtained from Stripe.js that allows stripe to look up payment info when sent to api, https://stripe.com/docs/api#tokens
	StripeToken string `protobuf:"bytes,1,opt,name=stripe_token,json=stripeToken" json:"stripe_token,omitempty"`
	Email       string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	UserId      string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *PaymentSourceRequest) Reset()                    { *m = PaymentSourceRequest{} }
func (m *PaymentSourceRequest) String() string            { return proto.CompactTextString(m) }
func (*PaymentSourceRequest) ProtoMessage()               {}
func (*PaymentSourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PaymentSourceRequest) GetStripeToken() string {
	if m != nil {
		return m.StripeToken
	}
	return ""
}

func (m *PaymentSourceRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PaymentSourceRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type PaymentSourcesList struct {
	PaymentSources []*PaymentSource `protobuf:"bytes,1,rep,name=payment_sources,json=paymentSources" json:"payment_sources,omitempty"`
}

func (m *PaymentSourcesList) Reset()                    { *m = PaymentSourcesList{} }
func (m *PaymentSourcesList) String() string            { return proto.CompactTextString(m) }
func (*PaymentSourcesList) ProtoMessage()               {}
func (*PaymentSourcesList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PaymentSourcesList) GetPaymentSources() []*PaymentSource {
	if m != nil {
		return m.PaymentSources
	}
	return nil
}

// PaymentSource describes the payment source used to make a Charge.
type PaymentSource struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Card *Card  `protobuf:"bytes,2,opt,name=card" json:"card,omitempty"`
}

func (m *PaymentSource) Reset()                    { *m = PaymentSource{} }
func (m *PaymentSource) String() string            { return proto.CompactTextString(m) }
func (*PaymentSource) ProtoMessage()               {}
func (*PaymentSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PaymentSource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentSource) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

// Card gives the information about the credit card on file we want to display
// to the user
type Card struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ExpMonth int64  `protobuf:"varint,2,opt,name=exp_month,json=expMonth" json:"exp_month,omitempty"`
	ExpYear  int64  `protobuf:"varint,3,opt,name=exp_year,json=expYear" json:"exp_year,omitempty"`
	LastFour string `protobuf:"bytes,4,opt,name=last_four,json=lastFour" json:"last_four,omitempty"`
	Brand    string `protobuf:"bytes,5,opt,name=brand" json:"brand,omitempty"`
	Zip      string `protobuf:"bytes,6,opt,name=zip" json:"zip,omitempty"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Card) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Card) GetExpMonth() int64 {
	if m != nil {
		return m.ExpMonth
	}
	return 0
}

func (m *Card) GetExpYear() int64 {
	if m != nil {
		return m.ExpYear
	}
	return 0
}

func (m *Card) GetLastFour() string {
	if m != nil {
		return m.LastFour
	}
	return ""
}

func (m *Card) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *Card) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

type ProductsList struct {
	Products []*Product `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
}

func (m *ProductsList) Reset()                    { *m = ProductsList{} }
func (m *ProductsList) String() string            { return proto.CompactTextString(m) }
func (*ProductsList) ProtoMessage()               {}
func (*ProductsList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProductsList) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

type Product struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Price int64  `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	SkuId string `protobuf:"bytes,4,opt,name=sku_id,json=skuId" json:"sku_id,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetSkuId() string {
	if m != nil {
		return m.SkuId
	}
	return ""
}

type PaymentSourceFilter struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *PaymentSourceFilter) Reset()                    { *m = PaymentSourceFilter{} }
func (m *PaymentSourceFilter) String() string            { return proto.CompactTextString(m) }
func (*PaymentSourceFilter) ProtoMessage()               {}
func (*PaymentSourceFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PaymentSourceFilter) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type ProductFilter struct {
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
}

func (m *ProductFilter) Reset()                    { *m = ProductFilter{} }
func (m *ProductFilter) String() string            { return proto.CompactTextString(m) }
func (*ProductFilter) ProtoMessage()               {}
func (*ProductFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ProductFilter) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

// StripeEvent is the event sent by the Stripe webhooks
type StripeEvent struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *StripeEvent) Reset()                    { *m = StripeEvent{} }
func (m *StripeEvent) String() string            { return proto.CompactTextString(m) }
func (*StripeEvent) ProtoMessage()               {}
func (*StripeEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StripeEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StripeEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StripeEvent) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type SubscriptionsListRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *SubscriptionsListRequest) Reset()                    { *m = SubscriptionsListRequest{} }
func (m *SubscriptionsListRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionsListRequest) ProtoMessage()               {}
func (*SubscriptionsListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SubscriptionsListRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type SubscriptionsList struct {
	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions" json:"subscriptions,omitempty"`
}

func (m *SubscriptionsList) Reset()                    { *m = SubscriptionsList{} }
func (m *SubscriptionsList) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionsList) ProtoMessage()               {}
func (*SubscriptionsList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SubscriptionsList) GetSubscriptions() []*Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type Subscription struct {
	Plan      string `protobuf:"bytes,1,opt,name=plan" json:"plan,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PeriodEnd int64  `protobuf:"varint,3,opt,name=period_end,json=periodEnd" json:"period_end,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Subscription) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

func (m *Subscription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subscription) GetPeriodEnd() int64 {
	if m != nil {
		return m.PeriodEnd
	}
	return 0
}

func init() {
	proto.RegisterType((*SimpleResponse)(nil), "payment.SimpleResponse")
	proto.RegisterType((*CustomerRequest)(nil), "payment.CustomerRequest")
	proto.RegisterType((*PurchaseRequest)(nil), "payment.PurchaseRequest")
	proto.RegisterType((*SubscriptionRequest)(nil), "payment.SubscriptionRequest")
	proto.RegisterType((*PaymentSourceRequest)(nil), "payment.PaymentSourceRequest")
	proto.RegisterType((*PaymentSourcesList)(nil), "payment.PaymentSourcesList")
	proto.RegisterType((*PaymentSource)(nil), "payment.PaymentSource")
	proto.RegisterType((*Card)(nil), "payment.Card")
	proto.RegisterType((*ProductsList)(nil), "payment.ProductsList")
	proto.RegisterType((*Product)(nil), "payment.Product")
	proto.RegisterType((*PaymentSourceFilter)(nil), "payment.PaymentSourceFilter")
	proto.RegisterType((*ProductFilter)(nil), "payment.ProductFilter")
	proto.RegisterType((*StripeEvent)(nil), "payment.StripeEvent")
	proto.RegisterType((*SubscriptionsListRequest)(nil), "payment.SubscriptionsListRequest")
	proto.RegisterType((*SubscriptionsList)(nil), "payment.SubscriptionsList")
	proto.RegisterType((*Subscription)(nil), "payment.Subscription")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Payment service

type PaymentClient interface {
	SaveCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	Unsubscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	SavePaymentSource(ctx context.Context, in *PaymentSourceRequest, opts ...grpc.CallOption) (*PaymentSource, error)
	ListPaymentSources(ctx context.Context, in *PaymentSourceFilter, opts ...grpc.CallOption) (*PaymentSourcesList, error)
	ListProducts(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*ProductsList, error)
	ListSubscriptions(ctx context.Context, in *SubscriptionsListRequest, opts ...grpc.CallOption) (*SubscriptionsList, error)
	HandleWebhook(ctx context.Context, in *StripeEvent, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type paymentClient struct {
	cc *grpc.ClientConn
}

func NewPaymentClient(cc *grpc.ClientConn) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) SaveCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/payment.Payment/SaveCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/payment.Payment/Purchase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/payment.Payment/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) Unsubscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/payment.Payment/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) SavePaymentSource(ctx context.Context, in *PaymentSourceRequest, opts ...grpc.CallOption) (*PaymentSource, error) {
	out := new(PaymentSource)
	err := grpc.Invoke(ctx, "/payment.Payment/SavePaymentSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) ListPaymentSources(ctx context.Context, in *PaymentSourceFilter, opts ...grpc.CallOption) (*PaymentSourcesList, error) {
	out := new(PaymentSourcesList)
	err := grpc.Invoke(ctx, "/payment.Payment/ListPaymentSources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) ListProducts(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*ProductsList, error) {
	out := new(ProductsList)
	err := grpc.Invoke(ctx, "/payment.Payment/ListProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) ListSubscriptions(ctx context.Context, in *SubscriptionsListRequest, opts ...grpc.CallOption) (*SubscriptionsList, error) {
	out := new(SubscriptionsList)
	err := grpc.Invoke(ctx, "/payment.Payment/ListSubscriptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) HandleWebhook(ctx context.Context, in *StripeEvent, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/payment.Payment/HandleWebhook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Payment service

type PaymentServer interface {
	SaveCustomer(context.Context, *CustomerRequest) (*SimpleResponse, error)
	Purchase(context.Context, *PurchaseRequest) (*SimpleResponse, error)
	Subscribe(context.Context, *SubscriptionRequest) (*SimpleResponse, error)
	Unsubscribe(context.Context, *SubscriptionRequest) (*SimpleResponse, error)
	SavePaymentSource(context.Context, *PaymentSourceRequest) (*PaymentSource, error)
	ListPaymentSources(context.Context, *PaymentSourceFilter) (*PaymentSourcesList, error)
	ListProducts(context.Context, *ProductFilter) (*ProductsList, error)
	ListSubscriptions(context.Context, *SubscriptionsListRequest) (*SubscriptionsList, error)
	HandleWebhook(context.Context, *StripeEvent) (*SimpleResponse, error)
}

func RegisterPaymentServer(s *grpc.Server, srv PaymentServer) {
	s.RegisterService(&_Payment_serviceDesc, srv)
}

func _Payment_SaveCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).SaveCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Payment/SaveCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).SaveCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Payment/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).Purchase(ctx, req.(*PurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Payment/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).Subscribe(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Payment/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).Unsubscribe(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_SavePaymentSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).SavePaymentSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Payment/SavePaymentSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).SavePaymentSource(ctx, req.(*PaymentSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_ListPaymentSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentSourceFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).ListPaymentSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Payment/ListPaymentSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).ListPaymentSources(ctx, req.(*PaymentSourceFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Payment/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).ListProducts(ctx, req.(*ProductFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Payment/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).ListSubscriptions(ctx, req.(*SubscriptionsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_HandleWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripeEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).HandleWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.Payment/HandleWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).HandleWebhook(ctx, req.(*StripeEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Payment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.Payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveCustomer",
			Handler:    _Payment_SaveCustomer_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _Payment_Purchase_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Payment_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Payment_Unsubscribe_Handler,
		},
		{
			MethodName: "SavePaymentSource",
			Handler:    _Payment_SavePaymentSource_Handler,
		},
		{
			MethodName: "ListPaymentSources",
			Handler:    _Payment_ListPaymentSources_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _Payment_ListProducts_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _Payment_ListSubscriptions_Handler,
		},
		{
			MethodName: "HandleWebhook",
			Handler:    _Payment_HandleWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}

func init() { proto.RegisterFile("payment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xcb, 0x6f, 0x1a, 0x3f,
	0x10, 0x0e, 0xe1, 0x3d, 0x40, 0x1e, 0xce, 0x8b, 0x1f, 0xf9, 0x45, 0x4a, 0x7c, 0xca, 0xa1, 0xe2,
	0x90, 0x1c, 0x5b, 0x29, 0x6d, 0xd3, 0xa4, 0xa5, 0x4a, 0x25, 0xba, 0x24, 0xaa, 0xda, 0xcb, 0xca,
	0xb0, 0xae, 0x58, 0x01, 0xb6, 0x6b, 0x7b, 0xa3, 0xa4, 0xd7, 0xfe, 0x09, 0x3d, 0xf4, 0xdf, 0xad,
	0xec, 0xf5, 0xc2, 0x2e, 0x81, 0x70, 0xe8, 0xcd, 0xf3, 0xd8, 0x8f, 0x99, 0x6f, 0xe6, 0x1b, 0xa0,
	0x21, 0xc8, 0xe3, 0x84, 0x32, 0xdd, 0x16, 0x92, 0x6b, 0x8e, 0xca, 0xce, 0xc4, 0x5b, 0xb0, 0xd1,
	0x0b, 0x27, 0x62, 0x4c, 0x3d, 0xaa, 0x04, 0x67, 0x8a, 0xe2, 0xf7, 0xb0, 0x79, 0x19, 0x29, 0xcd,
	0x27, 0x54, 0x7a, 0xf4, 0x47, 0x44, 0x95, 0x46, 0x07, 0x50, 0x8e, 0x14, 0x95, 0x7e, 0x18, 0x34,
	0x73, 0xc7, 0xb9, 0xd3, 0xaa, 0x57, 0x32, 0x66, 0x27, 0x40, 0x87, 0x50, 0x1d, 0xf0, 0x48, 0x70,
	0x66, 0x42, 0xeb, 0x36, 0x54, 0x89, 0x1d, 0x9d, 0x00, 0xbf, 0x81, 0xcd, 0x6e, 0x24, 0x07, 0x43,
	0xa2, 0xe8, 0x4a, 0xa0, 0x3d, 0x28, 0xa9, 0x51, 0x34, 0x43, 0x29, 0xaa, 0x51, 0xd4, 0x09, 0xf0,
	0xaf, 0x1c, 0xec, 0xf4, 0xa2, 0xbe, 0x1a, 0xc8, 0x50, 0xe8, 0x90, 0xb3, 0x95, 0x38, 0x08, 0x0a,
	0x62, 0x4c, 0x98, 0x43, 0xb1, 0x6f, 0x84, 0xa1, 0x41, 0xb4, 0x2f, 0xa8, 0x0c, 0x79, 0xe0, 0x53,
	0x16, 0x34, 0xf3, 0xc7, 0xb9, 0xd3, 0x8a, 0x57, 0x23, 0xba, 0x6b, 0x7d, 0x57, 0x6c, 0xae, 0x91,
	0xc2, 0x5c, 0x23, 0x43, 0xd8, 0xed, 0xc6, 0x74, 0xf5, 0x78, 0x24, 0x07, 0xd3, 0x6e, 0x4e, 0xa0,
	0xae, 0xb4, 0x0c, 0x05, 0xf5, 0x35, 0x1f, 0x51, 0xe6, 0x4a, 0xa9, 0xc5, 0xbe, 0x5b, 0xe3, 0x42,
	0xbb, 0x50, 0xa4, 0x13, 0x12, 0x8e, 0x93, 0xb6, 0xac, 0x91, 0x2e, 0x3f, 0x9f, 0x2e, 0x1f, 0xdf,
	0x01, 0xca, 0xfc, 0x92, 0xba, 0x09, 0x95, 0x46, 0x17, 0xb0, 0xe9, 0xc6, 0xe5, 0xab, 0xd8, 0xdd,
	0xcc, 0x1d, 0xe7, 0x4f, 0x6b, 0x67, 0xfb, 0xed, 0x64, 0xaa, 0xd9, 0xfa, 0x36, 0x44, 0x06, 0x04,
	0xbf, 0x85, 0x46, 0x26, 0x01, 0x6d, 0xc0, 0xfa, 0x94, 0xba, 0xf5, 0x30, 0x40, 0x27, 0x50, 0x18,
	0x10, 0x19, 0x93, 0x5f, 0x3b, 0x6b, 0x4c, 0x61, 0x2f, 0x89, 0x0c, 0x3c, 0x1b, 0xc2, 0xbf, 0x73,
	0x50, 0x30, 0xe6, 0x93, 0x6f, 0x0f, 0xa1, 0x4a, 0x1f, 0x84, 0x3f, 0xe1, 0x4c, 0x0f, 0x2d, 0x40,
	0xde, 0xab, 0xd0, 0x07, 0xf1, 0xc9, 0xd8, 0xe8, 0x3f, 0x30, 0x6f, 0xff, 0x91, 0x12, 0x69, 0x5b,
	0xcd, 0x7b, 0x65, 0xfa, 0x20, 0xbe, 0x52, 0x22, 0xcd, 0x77, 0x63, 0xa2, 0xb4, 0xff, 0x9d, 0x47,
	0x32, 0xa1, 0xdc, 0x38, 0xae, 0x79, 0x24, 0x0d, 0x6f, 0x7d, 0x49, 0x58, 0xd0, 0x2c, 0xc6, 0xbc,
	0x59, 0x03, 0x6d, 0x41, 0xfe, 0x67, 0x28, 0x9a, 0x25, 0xeb, 0x33, 0x4f, 0xfc, 0x0a, 0xea, 0x5d,
	0xc9, 0x83, 0x68, 0xa0, 0x63, 0xaa, 0x5e, 0x40, 0x45, 0x38, 0xdb, 0x71, 0xb4, 0x35, 0xe3, 0x28,
	0x0e, 0x78, 0xd3, 0x0c, 0xfc, 0x0d, 0xca, 0xce, 0xf9, 0xa4, 0x2b, 0x04, 0x05, 0x46, 0x26, 0x34,
	0x59, 0x24, 0xf3, 0x36, 0x45, 0x09, 0x19, 0x0e, 0xa8, 0xeb, 0x24, 0x36, 0x52, 0xab, 0x5b, 0x48,
	0xaf, 0x6e, 0x1b, 0x76, 0x32, 0x9c, 0x5f, 0x87, 0x63, 0x4d, 0xe5, 0xd2, 0xcd, 0xc5, 0x6d, 0x68,
	0xb8, 0x5a, 0x5c, 0xe6, 0x11, 0x80, 0x2b, 0x74, 0x96, 0x5c, 0x75, 0x9e, 0x4e, 0x80, 0x3f, 0x42,
	0xad, 0x67, 0x17, 0xed, 0xea, 0x9e, 0xb2, 0x85, 0xf5, 0xeb, 0x47, 0x31, 0xad, 0xdf, 0xbc, 0x97,
	0xaf, 0xdd, 0x39, 0x34, 0xd3, 0x2a, 0xb3, 0x54, 0xae, 0x92, 0x1a, 0xee, 0xc2, 0xf6, 0x93, 0x8f,
	0xd0, 0x4b, 0x68, 0xa8, 0xb4, 0xd3, 0x0d, 0x61, 0x6f, 0x3a, 0x84, 0x8c, 0x9a, 0xb3, 0xb9, 0xf8,
	0x0e, 0xea, 0xe9, 0xf0, 0x54, 0xcc, 0xb9, 0x94, 0x98, 0x17, 0xcd, 0xc5, 0x30, 0x95, 0x55, 0x77,
	0xde, 0xab, 0x8a, 0x44, 0xdb, 0x67, 0x7f, 0x8a, 0x50, 0x76, 0xa3, 0x40, 0x97, 0x50, 0xef, 0x91,
	0x7b, 0x9a, 0x1c, 0x38, 0xd4, 0x9c, 0xad, 0x7a, 0xf6, 0xe6, 0xb5, 0x0e, 0x66, 0x25, 0x67, 0xef,
	0xe3, 0x1a, 0xba, 0x80, 0x4a, 0x72, 0xd8, 0x52, 0x00, 0x73, 0xb7, 0xee, 0x39, 0x80, 0x77, 0x50,
	0x75, 0x8d, 0xf6, 0x29, 0xfa, 0x7f, 0x31, 0x37, 0xab, 0x51, 0xae, 0xa1, 0x76, 0xc7, 0xd4, 0xbf,
	0xe3, 0xdc, 0xc0, 0xb6, 0xe1, 0x24, 0x7b, 0x21, 0x8e, 0x96, 0x9c, 0x16, 0x07, 0xb7, 0xe4, 0xf2,
	0xe0, 0x35, 0xf4, 0x19, 0x90, 0xd9, 0x84, 0xec, 0x19, 0x4b, 0x15, 0xb7, 0x40, 0x14, 0xad, 0xc3,
	0xc5, 0x51, 0xbb, 0x52, 0x96, 0xef, 0xba, 0x85, 0x74, 0xb2, 0x45, 0xfb, 0xf3, 0x92, 0x76, 0x30,
	0x7b, 0xf3, 0xfe, 0x04, 0xe0, 0x16, 0xb6, 0xcd, 0x2b, 0xb3, 0xae, 0xe8, 0x64, 0x21, 0x5f, 0xe9,
	0xdd, 0x6f, 0xb5, 0x96, 0xa7, 0xe0, 0x35, 0xf4, 0x1a, 0x1a, 0x1f, 0x08, 0x0b, 0xc6, 0xf4, 0x0b,
	0xed, 0x0f, 0x39, 0x1f, 0xa1, 0xdd, 0x59, 0xfa, 0x4c, 0x99, 0xcf, 0x30, 0xdf, 0x2f, 0xd9, 0x3f,
	0xe3, 0xf3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x8a, 0xcf, 0xee, 0x9d, 0x07, 0x00, 0x00,
}
