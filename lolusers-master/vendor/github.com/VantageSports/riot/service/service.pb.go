// Code generated by protoc-gen-go.
// source: service/service.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service/service.proto

It has these top-level messages:
	RegionRequest
	SummonerIDRequest
	SummonerNameRequest
	Summoners
	MasteriesResponse
	NamedMasteries
	LeaguesResponse
	NamedLeagues
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import riot "github.com/VantageSports/riot"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegionRequest struct {
	Region string `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
}

func (m *RegionRequest) Reset()                    { *m = RegionRequest{} }
func (m *RegionRequest) String() string            { return proto.CompactTextString(m) }
func (*RegionRequest) ProtoMessage()               {}
func (*RegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SummonerIDRequest struct {
	Region string  `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	Ids    []int64 `protobuf:"varint,2,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *SummonerIDRequest) Reset()                    { *m = SummonerIDRequest{} }
func (m *SummonerIDRequest) String() string            { return proto.CompactTextString(m) }
func (*SummonerIDRequest) ProtoMessage()               {}
func (*SummonerIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SummonerNameRequest struct {
	Region string   `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	Names  []string `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
}

func (m *SummonerNameRequest) Reset()                    { *m = SummonerNameRequest{} }
func (m *SummonerNameRequest) String() string            { return proto.CompactTextString(m) }
func (*SummonerNameRequest) ProtoMessage()               {}
func (*SummonerNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Summoners struct {
	Summoners []*riot.Summoner `protobuf:"bytes,1,rep,name=summoners" json:"summoners,omitempty"`
}

func (m *Summoners) Reset()                    { *m = Summoners{} }
func (m *Summoners) String() string            { return proto.CompactTextString(m) }
func (*Summoners) ProtoMessage()               {}
func (*Summoners) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Summoners) GetSummoners() []*riot.Summoner {
	if m != nil {
		return m.Summoners
	}
	return nil
}

type MasteriesResponse struct {
	NamedMasteries []*NamedMasteries `protobuf:"bytes,1,rep,name=named_masteries,json=namedMasteries" json:"named_masteries,omitempty"`
}

func (m *MasteriesResponse) Reset()                    { *m = MasteriesResponse{} }
func (m *MasteriesResponse) String() string            { return proto.CompactTextString(m) }
func (*MasteriesResponse) ProtoMessage()               {}
func (*MasteriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MasteriesResponse) GetNamedMasteries() []*NamedMasteries {
	if m != nil {
		return m.NamedMasteries
	}
	return nil
}

type NamedMasteries struct {
	Name         string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MasteryPages []*riot.MasteryPage `protobuf:"bytes,2,rep,name=mastery_pages,json=masteryPages" json:"mastery_pages,omitempty"`
}

func (m *NamedMasteries) Reset()                    { *m = NamedMasteries{} }
func (m *NamedMasteries) String() string            { return proto.CompactTextString(m) }
func (*NamedMasteries) ProtoMessage()               {}
func (*NamedMasteries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NamedMasteries) GetMasteryPages() []*riot.MasteryPage {
	if m != nil {
		return m.MasteryPages
	}
	return nil
}

type LeaguesResponse struct {
	NamedLeagues []*NamedLeagues `protobuf:"bytes,1,rep,name=named_leagues,json=namedLeagues" json:"named_leagues,omitempty"`
}

func (m *LeaguesResponse) Reset()                    { *m = LeaguesResponse{} }
func (m *LeaguesResponse) String() string            { return proto.CompactTextString(m) }
func (*LeaguesResponse) ProtoMessage()               {}
func (*LeaguesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LeaguesResponse) GetNamedLeagues() []*NamedLeagues {
	if m != nil {
		return m.NamedLeagues
	}
	return nil
}

type NamedLeagues struct {
	Name    string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Leagues []*riot.League `protobuf:"bytes,2,rep,name=leagues" json:"leagues,omitempty"`
}

func (m *NamedLeagues) Reset()                    { *m = NamedLeagues{} }
func (m *NamedLeagues) String() string            { return proto.CompactTextString(m) }
func (*NamedLeagues) ProtoMessage()               {}
func (*NamedLeagues) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NamedLeagues) GetLeagues() []*riot.League {
	if m != nil {
		return m.Leagues
	}
	return nil
}

func init() {
	proto.RegisterType((*RegionRequest)(nil), "service.RegionRequest")
	proto.RegisterType((*SummonerIDRequest)(nil), "service.SummonerIDRequest")
	proto.RegisterType((*SummonerNameRequest)(nil), "service.SummonerNameRequest")
	proto.RegisterType((*Summoners)(nil), "service.Summoners")
	proto.RegisterType((*MasteriesResponse)(nil), "service.MasteriesResponse")
	proto.RegisterType((*NamedMasteries)(nil), "service.NamedMasteries")
	proto.RegisterType((*LeaguesResponse)(nil), "service.LeaguesResponse")
	proto.RegisterType((*NamedLeagues)(nil), "service.NamedLeagues")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Riot service

type RiotClient interface {
	LeagueBySummoner(ctx context.Context, in *SummonerIDRequest, opts ...grpc.CallOption) (*LeaguesResponse, error)
	LeagueEntryBySummoner(ctx context.Context, in *SummonerIDRequest, opts ...grpc.CallOption) (*LeaguesResponse, error)
	SummonersByName(ctx context.Context, in *SummonerNameRequest, opts ...grpc.CallOption) (*Summoners, error)
	SummonersById(ctx context.Context, in *SummonerIDRequest, opts ...grpc.CallOption) (*Summoners, error)
	Champions(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*riot.ChampMeta, error)
	SummonerSpells(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*riot.SummonerSpellList, error)
	Masteries(ctx context.Context, in *SummonerIDRequest, opts ...grpc.CallOption) (*MasteriesResponse, error)
}

type riotClient struct {
	cc *grpc.ClientConn
}

func NewRiotClient(cc *grpc.ClientConn) RiotClient {
	return &riotClient{cc}
}

func (c *riotClient) LeagueBySummoner(ctx context.Context, in *SummonerIDRequest, opts ...grpc.CallOption) (*LeaguesResponse, error) {
	out := new(LeaguesResponse)
	err := grpc.Invoke(ctx, "/service.Riot/LeagueBySummoner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotClient) LeagueEntryBySummoner(ctx context.Context, in *SummonerIDRequest, opts ...grpc.CallOption) (*LeaguesResponse, error) {
	out := new(LeaguesResponse)
	err := grpc.Invoke(ctx, "/service.Riot/LeagueEntryBySummoner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotClient) SummonersByName(ctx context.Context, in *SummonerNameRequest, opts ...grpc.CallOption) (*Summoners, error) {
	out := new(Summoners)
	err := grpc.Invoke(ctx, "/service.Riot/SummonersByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotClient) SummonersById(ctx context.Context, in *SummonerIDRequest, opts ...grpc.CallOption) (*Summoners, error) {
	out := new(Summoners)
	err := grpc.Invoke(ctx, "/service.Riot/SummonersById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotClient) Champions(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*riot.ChampMeta, error) {
	out := new(riot.ChampMeta)
	err := grpc.Invoke(ctx, "/service.Riot/Champions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotClient) SummonerSpells(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*riot.SummonerSpellList, error) {
	out := new(riot.SummonerSpellList)
	err := grpc.Invoke(ctx, "/service.Riot/SummonerSpells", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotClient) Masteries(ctx context.Context, in *SummonerIDRequest, opts ...grpc.CallOption) (*MasteriesResponse, error) {
	out := new(MasteriesResponse)
	err := grpc.Invoke(ctx, "/service.Riot/Masteries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Riot service

type RiotServer interface {
	LeagueBySummoner(context.Context, *SummonerIDRequest) (*LeaguesResponse, error)
	LeagueEntryBySummoner(context.Context, *SummonerIDRequest) (*LeaguesResponse, error)
	SummonersByName(context.Context, *SummonerNameRequest) (*Summoners, error)
	SummonersById(context.Context, *SummonerIDRequest) (*Summoners, error)
	Champions(context.Context, *RegionRequest) (*riot.ChampMeta, error)
	SummonerSpells(context.Context, *RegionRequest) (*riot.SummonerSpellList, error)
	Masteries(context.Context, *SummonerIDRequest) (*MasteriesResponse, error)
}

func RegisterRiotServer(s *grpc.Server, srv RiotServer) {
	s.RegisterService(&_Riot_serviceDesc, srv)
}

func _Riot_LeagueBySummoner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummonerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServer).LeagueBySummoner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Riot/LeagueBySummoner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServer).LeagueBySummoner(ctx, req.(*SummonerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Riot_LeagueEntryBySummoner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummonerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServer).LeagueEntryBySummoner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Riot/LeagueEntryBySummoner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServer).LeagueEntryBySummoner(ctx, req.(*SummonerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Riot_SummonersByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummonerNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServer).SummonersByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Riot/SummonersByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServer).SummonersByName(ctx, req.(*SummonerNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Riot_SummonersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummonerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServer).SummonersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Riot/SummonersById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServer).SummonersById(ctx, req.(*SummonerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Riot_Champions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServer).Champions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Riot/Champions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServer).Champions(ctx, req.(*RegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Riot_SummonerSpells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServer).SummonerSpells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Riot/SummonerSpells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServer).SummonerSpells(ctx, req.(*RegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Riot_Masteries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummonerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServer).Masteries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Riot/Masteries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServer).Masteries(ctx, req.(*SummonerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Riot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Riot",
	HandlerType: (*RiotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeagueBySummoner",
			Handler:    _Riot_LeagueBySummoner_Handler,
		},
		{
			MethodName: "LeagueEntryBySummoner",
			Handler:    _Riot_LeagueEntryBySummoner_Handler,
		},
		{
			MethodName: "SummonersByName",
			Handler:    _Riot_SummonersByName_Handler,
		},
		{
			MethodName: "SummonersById",
			Handler:    _Riot_SummonersById_Handler,
		},
		{
			MethodName: "Champions",
			Handler:    _Riot_Champions_Handler,
		},
		{
			MethodName: "SummonerSpells",
			Handler:    _Riot_SummonerSpells_Handler,
		},
		{
			MethodName: "Masteries",
			Handler:    _Riot_Masteries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}

func init() { proto.RegisterFile("service/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x6b, 0x13, 0x41,
	0x14, 0x4d, 0xdc, 0xda, 0xb2, 0xb7, 0xf9, 0x68, 0xae, 0xa6, 0x0d, 0x8b, 0x0f, 0x61, 0x1e, 0x34,
	0x0f, 0x12, 0x21, 0x42, 0x41, 0x41, 0xd0, 0xc6, 0x3e, 0xb4, 0x34, 0x2a, 0x53, 0x7c, 0x13, 0xca,
	0x68, 0x2e, 0x71, 0x20, 0x3b, 0xb3, 0xee, 0x4c, 0x84, 0xfd, 0xd9, 0xfe, 0x03, 0xd9, 0x9d, 0x9d,
	0xec, 0xae, 0xa9, 0xed, 0x4b, 0x9f, 0x32, 0x67, 0xce, 0xb9, 0x27, 0xe7, 0x5e, 0xee, 0x2c, 0x0c,
	0x0d, 0xa5, 0xbf, 0xe5, 0x0f, 0x7a, 0x55, 0xfe, 0x4e, 0x93, 0x54, 0x5b, 0x8d, 0x07, 0x25, 0x8c,
	0x20, 0x95, 0xda, 0xba, 0x4b, 0xf6, 0x02, 0xba, 0x9c, 0x56, 0x52, 0x2b, 0x4e, 0xbf, 0x36, 0x64,
	0x2c, 0x1e, 0xc3, 0x7e, 0x5a, 0x5c, 0x8c, 0xda, 0xe3, 0xf6, 0x24, 0xe4, 0x25, 0x62, 0xef, 0x60,
	0x70, 0xbd, 0x89, 0x63, 0xad, 0x28, 0xbd, 0xf8, 0x78, 0x8f, 0x18, 0x8f, 0x20, 0x90, 0x4b, 0x33,
	0x7a, 0x34, 0x0e, 0x26, 0x01, 0xcf, 0x8f, 0x6c, 0x0e, 0x4f, 0x7c, 0xf9, 0x27, 0x11, 0xd3, 0x7d,
	0x06, 0x4f, 0xe1, 0xb1, 0x12, 0x31, 0x39, 0x8b, 0x90, 0x3b, 0xc0, 0xde, 0x40, 0xe8, 0x4d, 0x0c,
	0xbe, 0x84, 0xd0, 0x78, 0x30, 0x6a, 0x8f, 0x83, 0xc9, 0xe1, 0xac, 0x37, 0x2d, 0x3a, 0xf3, 0x1a,
	0x5e, 0x09, 0xd8, 0x57, 0x18, 0x2c, 0x84, 0xb1, 0x94, 0x4a, 0x32, 0x9c, 0x4c, 0xa2, 0x95, 0x21,
	0x7c, 0x0f, 0xfd, 0xdc, 0x78, 0x79, 0x13, 0x7b, 0xaa, 0x34, 0x3a, 0x99, 0xfa, 0xd1, 0xe5, 0x61,
	0x97, 0x55, 0x65, 0x4f, 0x35, 0x30, 0xfb, 0x06, 0xbd, 0xa6, 0x02, 0x11, 0xf6, 0x72, 0x4d, 0xd9,
	0x4f, 0x71, 0xc6, 0x53, 0xe8, 0xba, 0x7f, 0xc8, 0x6e, 0x12, 0xb1, 0x2a, 0xbb, 0x3a, 0x9c, 0x0d,
	0x5c, 0x5c, 0x57, 0x9b, 0x7d, 0x11, 0x2b, 0xe2, 0x9d, 0xb8, 0x02, 0x86, 0x2d, 0xa0, 0x7f, 0x45,
	0x62, 0xb5, 0xa9, 0x45, 0x7e, 0x0b, 0x5d, 0x17, 0x79, 0xed, 0x88, 0x32, 0xf0, 0xb0, 0x19, 0xd8,
	0x57, 0x75, 0x54, 0x0d, 0xb1, 0x4b, 0xe8, 0xd4, 0xd9, 0x5b, 0xa3, 0x3e, 0x87, 0x03, 0xef, 0xec,
	0x42, 0x76, 0x5c, 0x48, 0x57, 0xc3, 0x3d, 0x39, 0xfb, 0x13, 0xc0, 0x1e, 0x97, 0xda, 0xe2, 0x25,
	0x1c, 0x39, 0xee, 0x2c, 0xf3, 0x73, 0xc7, 0x68, 0x9b, 0x66, 0x67, 0x65, 0xa2, 0xd1, 0x96, 0xfb,
	0xa7, 0x35, 0xd6, 0xc2, 0xcf, 0x30, 0x74, 0x97, 0xe7, 0xca, 0xa6, 0xd9, 0x03, 0x18, 0x9e, 0x43,
	0x7f, 0xbb, 0x30, 0x67, 0x59, 0xde, 0x3c, 0x3e, 0xdb, 0xb1, 0xaa, 0xed, 0x63, 0x84, 0x3b, 0xac,
	0x61, 0x2d, 0xfc, 0x00, 0xdd, 0x9a, 0xcd, 0xc5, 0xf2, 0xce, 0x3c, 0xb7, 0x5b, 0x9c, 0x42, 0x38,
	0xff, 0x29, 0xe2, 0x44, 0x6a, 0x65, 0xf0, 0x78, 0x2b, 0x69, 0xbc, 0xbd, 0xa8, 0xef, 0x66, 0x5d,
	0x08, 0x17, 0x64, 0x05, 0x6b, 0xe1, 0x1c, 0x7a, 0xde, 0xe6, 0x3a, 0xa1, 0xf5, 0xfa, 0xff, 0xc5,
	0x27, 0xcd, 0xe5, 0x2f, 0xd4, 0x57, 0xd2, 0xd8, 0x62, 0x0c, 0x61, 0xb5, 0xa0, 0x77, 0x65, 0xaf,
	0xb8, 0x9d, 0xc7, 0xc2, 0x5a, 0xdf, 0xf7, 0x8b, 0x4f, 0xc6, 0xeb, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xa9, 0x26, 0xc9, 0xa4, 0x60, 0x04, 0x00, 0x00,
}
