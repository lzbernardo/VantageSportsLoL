// Code generated by protoc-gen-go.
// source: lolstats.proto
// DO NOT EDIT!

/*
Package lolstats is a generated protocol buffer package.

It is generated from these files:
	lolstats.proto

It has these top-level messages:
	MatchSummary
	BasicStats
	AdvancedStats
	TeamAdvancedStats
	HistoryRequest
	HistoryResponse
	StatsRequest
	StatListResponse
	MatchRequest
	DetailsResponse
	TeamRequest
	TeamDetailsResponse
	SearchRequest
	ReplayEntry
	SearchResponse
	GoalCreateStatsRequest
	GoalCreateCustomRequest
	GoalGetRequest
	GoalGetResponse
	GoalUpdateStatusRequest
	GoalDeleteRequest
	Goal
	CountResponse
	SimpleResponse
*/
package lolstats

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GoalStatus int32

const (
	GoalStatus_STATUS_NONE    GoalStatus = 0
	GoalStatus_NEW            GoalStatus = 1
	GoalStatus_ACCEPTED       GoalStatus = 2
	GoalStatus_COMPLETED      GoalStatus = 4
	GoalStatus_CANCELLED      GoalStatus = 5
	GoalStatus_COMPLETED_SEEN GoalStatus = 6
)

var GoalStatus_name = map[int32]string{
	0: "STATUS_NONE",
	1: "NEW",
	2: "ACCEPTED",
	4: "COMPLETED",
	5: "CANCELLED",
	6: "COMPLETED_SEEN",
}
var GoalStatus_value = map[string]int32{
	"STATUS_NONE":    0,
	"NEW":            1,
	"ACCEPTED":       2,
	"COMPLETED":      4,
	"CANCELLED":      5,
	"COMPLETED_SEEN": 6,
}

func (x GoalStatus) String() string {
	return proto.EnumName(GoalStatus_name, int32(x))
}
func (GoalStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GoalComparator int32

const (
	GoalComparator_COMPARATOR_NONE       GoalComparator = 0
	GoalComparator_GREATER_THAN          GoalComparator = 1
	GoalComparator_GREATER_THAN_OR_EQUAL GoalComparator = 2
	GoalComparator_LESS_THAN_OR_EQUAL    GoalComparator = 3
	GoalComparator_LESS_THAN             GoalComparator = 4
)

var GoalComparator_name = map[int32]string{
	0: "COMPARATOR_NONE",
	1: "GREATER_THAN",
	2: "GREATER_THAN_OR_EQUAL",
	3: "LESS_THAN_OR_EQUAL",
	4: "LESS_THAN",
}
var GoalComparator_value = map[string]int32{
	"COMPARATOR_NONE":       0,
	"GREATER_THAN":          1,
	"GREATER_THAN_OR_EQUAL": 2,
	"LESS_THAN_OR_EQUAL":    3,
	"LESS_THAN":             4,
}

func (x GoalComparator) String() string {
	return proto.EnumName(GoalComparator_name, int32(x))
}
func (GoalComparator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GoalCategory int32

const (
	GoalCategory_CATEGORY_NONE   GoalCategory = 0
	GoalCategory_DECISION_MAKING GoalCategory = 1
	GoalCategory_MECHANICS       GoalCategory = 2
)

var GoalCategory_name = map[int32]string{
	0: "CATEGORY_NONE",
	1: "DECISION_MAKING",
	2: "MECHANICS",
}
var GoalCategory_value = map[string]int32{
	"CATEGORY_NONE":   0,
	"DECISION_MAKING": 1,
	"MECHANICS":       2,
}

func (x GoalCategory) String() string {
	return proto.EnumName(GoalCategory_name, int32(x))
}
func (GoalCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type MatchSummary struct {
	SummonerId         int64   `protobuf:"varint,1,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Platform           string  `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	MatchCreation      int64   `protobuf:"varint,4,opt,name=match_creation,json=matchCreation" json:"match_creation,omitempty"`
	ChampionId         int32   `protobuf:"varint,5,opt,name=champion_id,json=championId" json:"champion_id,omitempty"`
	Lane               string  `protobuf:"bytes,6,opt,name=lane" json:"lane,omitempty"`
	ChampionIndex      int32   `protobuf:"varint,7,opt,name=champion_index,json=championIndex" json:"champion_index,omitempty"`
	MapId              int32   `protobuf:"varint,8,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	MatchDuration      float64 `protobuf:"fixed64,9,opt,name=match_duration,json=matchDuration" json:"match_duration,omitempty"`
	MatchId            int64   `protobuf:"varint,10,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MatchMode          string  `protobuf:"bytes,11,opt,name=match_mode,json=matchMode" json:"match_mode,omitempty"`
	MatchType          string  `protobuf:"bytes,12,opt,name=match_type,json=matchType" json:"match_type,omitempty"`
	MatchVersion       string  `protobuf:"bytes,13,opt,name=match_version,json=matchVersion" json:"match_version,omitempty"`
	OpponentChampionId int32   `protobuf:"varint,15,opt,name=opponent_champion_id,json=opponentChampionId" json:"opponent_champion_id,omitempty"`
	QueueType          string  `protobuf:"bytes,16,opt,name=queue_type,json=queueType" json:"queue_type,omitempty"`
	Role               string  `protobuf:"bytes,17,opt,name=role" json:"role,omitempty"`
	SummonerName       string  `protobuf:"bytes,18,opt,name=summoner_name,json=summonerName" json:"summoner_name,omitempty"`
	Winner             bool    `protobuf:"varint,19,opt,name=winner" json:"winner,omitempty"`
	Tier               string  `protobuf:"bytes,20,opt,name=tier" json:"tier,omitempty"`
	Division           string  `protobuf:"bytes,21,opt,name=division" json:"division,omitempty"`
	Kills              int64   `protobuf:"varint,22,opt,name=kills" json:"kills,omitempty"`
	Deaths             int64   `protobuf:"varint,23,opt,name=deaths" json:"deaths,omitempty"`
	Assists            int64   `protobuf:"varint,24,opt,name=assists" json:"assists,omitempty"`
}

func (m *MatchSummary) Reset()                    { *m = MatchSummary{} }
func (m *MatchSummary) String() string            { return proto.CompactTextString(m) }
func (*MatchSummary) ProtoMessage()               {}
func (*MatchSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MatchSummary) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *MatchSummary) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *MatchSummary) GetMatchCreation() int64 {
	if m != nil {
		return m.MatchCreation
	}
	return 0
}

func (m *MatchSummary) GetChampionId() int32 {
	if m != nil {
		return m.ChampionId
	}
	return 0
}

func (m *MatchSummary) GetLane() string {
	if m != nil {
		return m.Lane
	}
	return ""
}

func (m *MatchSummary) GetChampionIndex() int32 {
	if m != nil {
		return m.ChampionIndex
	}
	return 0
}

func (m *MatchSummary) GetMapId() int32 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *MatchSummary) GetMatchDuration() float64 {
	if m != nil {
		return m.MatchDuration
	}
	return 0
}

func (m *MatchSummary) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *MatchSummary) GetMatchMode() string {
	if m != nil {
		return m.MatchMode
	}
	return ""
}

func (m *MatchSummary) GetMatchType() string {
	if m != nil {
		return m.MatchType
	}
	return ""
}

func (m *MatchSummary) GetMatchVersion() string {
	if m != nil {
		return m.MatchVersion
	}
	return ""
}

func (m *MatchSummary) GetOpponentChampionId() int32 {
	if m != nil {
		return m.OpponentChampionId
	}
	return 0
}

func (m *MatchSummary) GetQueueType() string {
	if m != nil {
		return m.QueueType
	}
	return ""
}

func (m *MatchSummary) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *MatchSummary) GetSummonerName() string {
	if m != nil {
		return m.SummonerName
	}
	return ""
}

func (m *MatchSummary) GetWinner() bool {
	if m != nil {
		return m.Winner
	}
	return false
}

func (m *MatchSummary) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *MatchSummary) GetDivision() string {
	if m != nil {
		return m.Division
	}
	return ""
}

func (m *MatchSummary) GetKills() int64 {
	if m != nil {
		return m.Kills
	}
	return 0
}

func (m *MatchSummary) GetDeaths() int64 {
	if m != nil {
		return m.Deaths
	}
	return 0
}

func (m *MatchSummary) GetAssists() int64 {
	if m != nil {
		return m.Assists
	}
	return 0
}

type BasicStats struct {
	StatsJson string `protobuf:"bytes,1,opt,name=statsJson" json:"statsJson,omitempty"`
}

func (m *BasicStats) Reset()                    { *m = BasicStats{} }
func (m *BasicStats) String() string            { return proto.CompactTextString(m) }
func (*BasicStats) ProtoMessage()               {}
func (*BasicStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BasicStats) GetStatsJson() string {
	if m != nil {
		return m.StatsJson
	}
	return ""
}

type AdvancedStats struct {
	StatsJson string `protobuf:"bytes,1,opt,name=statsJson" json:"statsJson,omitempty"`
}

func (m *AdvancedStats) Reset()                    { *m = AdvancedStats{} }
func (m *AdvancedStats) String() string            { return proto.CompactTextString(m) }
func (*AdvancedStats) ProtoMessage()               {}
func (*AdvancedStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AdvancedStats) GetStatsJson() string {
	if m != nil {
		return m.StatsJson
	}
	return ""
}

type TeamAdvancedStats struct {
	// The keys are the 5 participant ids + team_id
	Results map[int64]string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TeamAdvancedStats) Reset()                    { *m = TeamAdvancedStats{} }
func (m *TeamAdvancedStats) String() string            { return proto.CompactTextString(m) }
func (*TeamAdvancedStats) ProtoMessage()               {}
func (*TeamAdvancedStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TeamAdvancedStats) GetResults() map[int64]string {
	if m != nil {
		return m.Results
	}
	return nil
}

type HistoryRequest struct {
	SummonerId int64  `protobuf:"varint,1,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Platform   string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	Limit      int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Cursor     string `protobuf:"bytes,5,opt,name=cursor" json:"cursor,omitempty"`
	QueueType  string `protobuf:"bytes,6,opt,name=queueType" json:"queueType,omitempty"`
}

func (m *HistoryRequest) Reset()                    { *m = HistoryRequest{} }
func (m *HistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryRequest) ProtoMessage()               {}
func (*HistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HistoryRequest) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *HistoryRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *HistoryRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *HistoryRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *HistoryRequest) GetQueueType() string {
	if m != nil {
		return m.QueueType
	}
	return ""
}

type HistoryResponse struct {
	Matches []*MatchSummary `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	Cursor  string          `protobuf:"bytes,2,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *HistoryResponse) Reset()                    { *m = HistoryResponse{} }
func (m *HistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryResponse) ProtoMessage()               {}
func (*HistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HistoryResponse) GetMatches() []*MatchSummary {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *HistoryResponse) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

type StatsRequest struct {
	Selects            []string `protobuf:"bytes,1,rep,name=selects" json:"selects,omitempty"`
	Platform           string   `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	QueueType          string   `protobuf:"bytes,3,opt,name=queue_type,json=queueType" json:"queue_type,omitempty"`
	PatchPrefix        string   `protobuf:"bytes,4,opt,name=patch_prefix,json=patchPrefix" json:"patch_prefix,omitempty"`
	LastN              int32    `protobuf:"varint,5,opt,name=last_n,json=lastN" json:"last_n,omitempty"`
	Tier               string   `protobuf:"bytes,6,opt,name=tier" json:"tier,omitempty"`
	Division           string   `protobuf:"bytes,7,opt,name=division" json:"division,omitempty"`
	Lane               string   `protobuf:"bytes,8,opt,name=lane" json:"lane,omitempty"`
	Role               string   `protobuf:"bytes,9,opt,name=role" json:"role,omitempty"`
	ChampionId         int32    `protobuf:"varint,10,opt,name=champion_id,json=championId" json:"champion_id,omitempty"`
	OpponentChampionId int32    `protobuf:"varint,11,opt,name=opponent_champion_id,json=opponentChampionId" json:"opponent_champion_id,omitempty"`
	SummonerId         int64    `protobuf:"varint,12,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	RolePosition       string   `protobuf:"bytes,13,opt,name=role_position,json=rolePosition" json:"role_position,omitempty"`
}

func (m *StatsRequest) Reset()                    { *m = StatsRequest{} }
func (m *StatsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()               {}
func (*StatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StatsRequest) GetSelects() []string {
	if m != nil {
		return m.Selects
	}
	return nil
}

func (m *StatsRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *StatsRequest) GetQueueType() string {
	if m != nil {
		return m.QueueType
	}
	return ""
}

func (m *StatsRequest) GetPatchPrefix() string {
	if m != nil {
		return m.PatchPrefix
	}
	return ""
}

func (m *StatsRequest) GetLastN() int32 {
	if m != nil {
		return m.LastN
	}
	return 0
}

func (m *StatsRequest) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *StatsRequest) GetDivision() string {
	if m != nil {
		return m.Division
	}
	return ""
}

func (m *StatsRequest) GetLane() string {
	if m != nil {
		return m.Lane
	}
	return ""
}

func (m *StatsRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *StatsRequest) GetChampionId() int32 {
	if m != nil {
		return m.ChampionId
	}
	return 0
}

func (m *StatsRequest) GetOpponentChampionId() int32 {
	if m != nil {
		return m.OpponentChampionId
	}
	return 0
}

func (m *StatsRequest) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *StatsRequest) GetRolePosition() string {
	if m != nil {
		return m.RolePosition
	}
	return ""
}

// The keys of the result map are the "select" strings in the StatsRequest.
// The values are arrays of numbers, representing values for each stat
// For Percentiles, each array has 101 values, representing the 0th -> 100th percentile for that stat
type StatListResponse struct {
	Result map[string]*StatListResponse_StatList `protobuf:"bytes,1,rep,name=result" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Count  int64                                 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *StatListResponse) Reset()                    { *m = StatListResponse{} }
func (m *StatListResponse) String() string            { return proto.CompactTextString(m) }
func (*StatListResponse) ProtoMessage()               {}
func (*StatListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StatListResponse) GetResult() map[string]*StatListResponse_StatList {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *StatListResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type StatListResponse_StatList struct {
	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values" json:"values,omitempty"`
}

func (m *StatListResponse_StatList) Reset()                    { *m = StatListResponse_StatList{} }
func (m *StatListResponse_StatList) String() string            { return proto.CompactTextString(m) }
func (*StatListResponse_StatList) ProtoMessage()               {}
func (*StatListResponse_StatList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *StatListResponse_StatList) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type MatchRequest struct {
	SummonerId int64  `protobuf:"varint,1,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Platform   string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	MatchId    int64  `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (m *MatchRequest) Reset()                    { *m = MatchRequest{} }
func (m *MatchRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchRequest) ProtoMessage()               {}
func (*MatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MatchRequest) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *MatchRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *MatchRequest) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type DetailsResponse struct {
	Basic *BasicStats `protobuf:"bytes,1,opt,name=basic" json:"basic,omitempty"`
}

func (m *DetailsResponse) Reset()                    { *m = DetailsResponse{} }
func (m *DetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*DetailsResponse) ProtoMessage()               {}
func (*DetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DetailsResponse) GetBasic() *BasicStats {
	if m != nil {
		return m.Basic
	}
	return nil
}

type TeamRequest struct {
	TeamId   int64  `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Platform string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	MatchId  int64  `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (m *TeamRequest) Reset()                    { *m = TeamRequest{} }
func (m *TeamRequest) String() string            { return proto.CompactTextString(m) }
func (*TeamRequest) ProtoMessage()               {}
func (*TeamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TeamRequest) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *TeamRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *TeamRequest) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type TeamDetailsResponse struct {
	// The keys are the 5 participant ids + team_id
	Results map[int64]*BasicStats `protobuf:"bytes,1,rep,name=results" json:"results,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TeamDetailsResponse) Reset()                    { *m = TeamDetailsResponse{} }
func (m *TeamDetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*TeamDetailsResponse) ProtoMessage()               {}
func (*TeamDetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TeamDetailsResponse) GetResults() map[int64]*BasicStats {
	if m != nil {
		return m.Results
	}
	return nil
}

type SearchRequest struct {
	Platform           string   `protobuf:"bytes,1,opt,name=platform" json:"platform,omitempty"`
	QueueType          string   `protobuf:"bytes,2,opt,name=queue_type,json=queueType" json:"queue_type,omitempty"`
	PatchPrefix        string   `protobuf:"bytes,3,opt,name=patch_prefix,json=patchPrefix" json:"patch_prefix,omitempty"`
	LastN              int64    `protobuf:"varint,4,opt,name=last_n,json=lastN" json:"last_n,omitempty"`
	Tiers              []string `protobuf:"bytes,5,rep,name=tiers" json:"tiers,omitempty"`
	RolePosition       string   `protobuf:"bytes,6,opt,name=role_position,json=rolePosition" json:"role_position,omitempty"`
	ChampionId         int64    `protobuf:"varint,7,opt,name=champion_id,json=championId" json:"champion_id,omitempty"`
	OpponentChampionId int64    `protobuf:"varint,8,opt,name=opponent_champion_id,json=opponentChampionId" json:"opponent_champion_id,omitempty"`
	TopStat            string   `protobuf:"bytes,9,opt,name=top_stat,json=topStat" json:"top_stat,omitempty"`
	GoodKills          []string `protobuf:"bytes,10,rep,name=good_kills,json=goodKills" json:"good_kills,omitempty"`
	ExcludeSummonerId  int64    `protobuf:"varint,11,opt,name=exclude_summoner_id,json=excludeSummonerId" json:"exclude_summoner_id,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SearchRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SearchRequest) GetQueueType() string {
	if m != nil {
		return m.QueueType
	}
	return ""
}

func (m *SearchRequest) GetPatchPrefix() string {
	if m != nil {
		return m.PatchPrefix
	}
	return ""
}

func (m *SearchRequest) GetLastN() int64 {
	if m != nil {
		return m.LastN
	}
	return 0
}

func (m *SearchRequest) GetTiers() []string {
	if m != nil {
		return m.Tiers
	}
	return nil
}

func (m *SearchRequest) GetRolePosition() string {
	if m != nil {
		return m.RolePosition
	}
	return ""
}

func (m *SearchRequest) GetChampionId() int64 {
	if m != nil {
		return m.ChampionId
	}
	return 0
}

func (m *SearchRequest) GetOpponentChampionId() int64 {
	if m != nil {
		return m.OpponentChampionId
	}
	return 0
}

func (m *SearchRequest) GetTopStat() string {
	if m != nil {
		return m.TopStat
	}
	return ""
}

func (m *SearchRequest) GetGoodKills() []string {
	if m != nil {
		return m.GoodKills
	}
	return nil
}

func (m *SearchRequest) GetExcludeSummonerId() int64 {
	if m != nil {
		return m.ExcludeSummonerId
	}
	return 0
}

type ReplayEntry struct {
	MatchId            int64            `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Platform           string           `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	OpponentChampionId int64            `protobuf:"varint,3,opt,name=opponent_champion_id,json=opponentChampionId" json:"opponent_champion_id,omitempty"`
	GoldDiffZeroToTen  float64          `protobuf:"fixed64,4,opt,name=gold_diff_zero_to_ten,json=goldDiffZeroToTen" json:"gold_diff_zero_to_ten,omitempty"`
	GoodKills          map[string]int64 `protobuf:"bytes,5,rep,name=good_kills,json=goodKills" json:"good_kills,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Tier               string           `protobuf:"bytes,6,opt,name=tier" json:"tier,omitempty"`
	CsDiff             float64          `protobuf:"fixed64,7,opt,name=cs_diff,json=csDiff" json:"cs_diff,omitempty"`
}

func (m *ReplayEntry) Reset()                    { *m = ReplayEntry{} }
func (m *ReplayEntry) String() string            { return proto.CompactTextString(m) }
func (*ReplayEntry) ProtoMessage()               {}
func (*ReplayEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReplayEntry) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *ReplayEntry) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ReplayEntry) GetOpponentChampionId() int64 {
	if m != nil {
		return m.OpponentChampionId
	}
	return 0
}

func (m *ReplayEntry) GetGoldDiffZeroToTen() float64 {
	if m != nil {
		return m.GoldDiffZeroToTen
	}
	return 0
}

func (m *ReplayEntry) GetGoodKills() map[string]int64 {
	if m != nil {
		return m.GoodKills
	}
	return nil
}

func (m *ReplayEntry) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *ReplayEntry) GetCsDiff() float64 {
	if m != nil {
		return m.CsDiff
	}
	return 0
}

type SearchResponse struct {
	Results []*ReplayEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Count   int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SearchResponse) GetResults() []*ReplayEntry {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SearchResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GoalCreateStatsRequest struct {
	SummonerId             int64          `protobuf:"varint,1,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Platform               string         `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	RolePosition           string         `protobuf:"bytes,3,opt,name=role_position,json=rolePosition" json:"role_position,omitempty"`
	NumGoals               int64          `protobuf:"varint,4,opt,name=num_goals,json=numGoals" json:"num_goals,omitempty"`
	TargetAchievementCount int64          `protobuf:"varint,5,opt,name=target_achievement_count,json=targetAchievementCount" json:"target_achievement_count,omitempty"`
	Categories             []GoalCategory `protobuf:"varint,6,rep,packed,name=categories,enum=lolstats.GoalCategory" json:"categories,omitempty"`
}

func (m *GoalCreateStatsRequest) Reset()                    { *m = GoalCreateStatsRequest{} }
func (m *GoalCreateStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GoalCreateStatsRequest) ProtoMessage()               {}
func (*GoalCreateStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GoalCreateStatsRequest) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *GoalCreateStatsRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GoalCreateStatsRequest) GetRolePosition() string {
	if m != nil {
		return m.RolePosition
	}
	return ""
}

func (m *GoalCreateStatsRequest) GetNumGoals() int64 {
	if m != nil {
		return m.NumGoals
	}
	return 0
}

func (m *GoalCreateStatsRequest) GetTargetAchievementCount() int64 {
	if m != nil {
		return m.TargetAchievementCount
	}
	return 0
}

func (m *GoalCreateStatsRequest) GetCategories() []GoalCategory {
	if m != nil {
		return m.Categories
	}
	return nil
}

type GoalCreateCustomRequest struct {
	SummonerId     int64  `protobuf:"varint,1,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Platform       string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	RolePosition   string `protobuf:"bytes,3,opt,name=role_position,json=rolePosition" json:"role_position,omitempty"`
	UnderlyingStat string `protobuf:"bytes,4,opt,name=underlying_stat,json=underlyingStat" json:"underlying_stat,omitempty"`
}

func (m *GoalCreateCustomRequest) Reset()                    { *m = GoalCreateCustomRequest{} }
func (m *GoalCreateCustomRequest) String() string            { return proto.CompactTextString(m) }
func (*GoalCreateCustomRequest) ProtoMessage()               {}
func (*GoalCreateCustomRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GoalCreateCustomRequest) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *GoalCreateCustomRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GoalCreateCustomRequest) GetRolePosition() string {
	if m != nil {
		return m.RolePosition
	}
	return ""
}

func (m *GoalCreateCustomRequest) GetUnderlyingStat() string {
	if m != nil {
		return m.UnderlyingStat
	}
	return ""
}

type GoalGetRequest struct {
	SummonerId   int64      `protobuf:"varint,1,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Platform     string     `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	RolePosition string     `protobuf:"bytes,3,opt,name=role_position,json=rolePosition" json:"role_position,omitempty"`
	ChampionId   int64      `protobuf:"varint,4,opt,name=champion_id,json=championId" json:"champion_id,omitempty"`
	Status       GoalStatus `protobuf:"varint,5,opt,name=status,enum=lolstats.GoalStatus" json:"status,omitempty"`
}

func (m *GoalGetRequest) Reset()                    { *m = GoalGetRequest{} }
func (m *GoalGetRequest) String() string            { return proto.CompactTextString(m) }
func (*GoalGetRequest) ProtoMessage()               {}
func (*GoalGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GoalGetRequest) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *GoalGetRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GoalGetRequest) GetRolePosition() string {
	if m != nil {
		return m.RolePosition
	}
	return ""
}

func (m *GoalGetRequest) GetChampionId() int64 {
	if m != nil {
		return m.ChampionId
	}
	return 0
}

func (m *GoalGetRequest) GetStatus() GoalStatus {
	if m != nil {
		return m.Status
	}
	return GoalStatus_STATUS_NONE
}

type GoalGetResponse struct {
	Goals []*Goal `protobuf:"bytes,1,rep,name=goals" json:"goals,omitempty"`
}

func (m *GoalGetResponse) Reset()                    { *m = GoalGetResponse{} }
func (m *GoalGetResponse) String() string            { return proto.CompactTextString(m) }
func (*GoalGetResponse) ProtoMessage()               {}
func (*GoalGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GoalGetResponse) GetGoals() []*Goal {
	if m != nil {
		return m.Goals
	}
	return nil
}

type GoalUpdateStatusRequest struct {
	SummonerId int64      `protobuf:"varint,1,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Platform   string     `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	GoalId     string     `protobuf:"bytes,3,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	Status     GoalStatus `protobuf:"varint,4,opt,name=status,enum=lolstats.GoalStatus" json:"status,omitempty"`
}

func (m *GoalUpdateStatusRequest) Reset()                    { *m = GoalUpdateStatusRequest{} }
func (m *GoalUpdateStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GoalUpdateStatusRequest) ProtoMessage()               {}
func (*GoalUpdateStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GoalUpdateStatusRequest) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *GoalUpdateStatusRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GoalUpdateStatusRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

func (m *GoalUpdateStatusRequest) GetStatus() GoalStatus {
	if m != nil {
		return m.Status
	}
	return GoalStatus_STATUS_NONE
}

type GoalDeleteRequest struct {
	SummonerId int64  `protobuf:"varint,1,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Platform   string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	GoalId     string `protobuf:"bytes,3,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
}

func (m *GoalDeleteRequest) Reset()                    { *m = GoalDeleteRequest{} }
func (m *GoalDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*GoalDeleteRequest) ProtoMessage()               {}
func (*GoalDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GoalDeleteRequest) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *GoalDeleteRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GoalDeleteRequest) GetGoalId() string {
	if m != nil {
		return m.GoalId
	}
	return ""
}

type Goal struct {
	Id                     string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Created                *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	LastUpdated            *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	Status                 GoalStatus                 `protobuf:"varint,4,opt,name=status,enum=lolstats.GoalStatus" json:"status,omitempty"`
	SummonerId             int64                      `protobuf:"varint,5,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Platform               string                     `protobuf:"bytes,6,opt,name=platform" json:"platform,omitempty"`
	UnderlyingStat         string                     `protobuf:"bytes,7,opt,name=underlying_stat,json=underlyingStat" json:"underlying_stat,omitempty"`
	TargetValue            float64                    `protobuf:"fixed64,8,opt,name=target_value,json=targetValue" json:"target_value,omitempty"`
	Comparator             GoalComparator             `protobuf:"varint,9,opt,name=comparator,enum=lolstats.GoalComparator" json:"comparator,omitempty"`
	AchievementCount       int64                      `protobuf:"varint,10,opt,name=achievement_count,json=achievementCount" json:"achievement_count,omitempty"`
	TargetAchievementCount int64                      `protobuf:"varint,11,opt,name=target_achievement_count,json=targetAchievementCount" json:"target_achievement_count,omitempty"`
	ImportanceWeight       float64                    `protobuf:"fixed64,12,opt,name=importance_weight,json=importanceWeight" json:"importance_weight,omitempty"`
	RolePosition           string                     `protobuf:"bytes,14,opt,name=role_position,json=rolePosition" json:"role_position,omitempty"`
	ChampionId             int64                      `protobuf:"varint,15,opt,name=champion_id,json=championId" json:"champion_id,omitempty"`
	Category               GoalCategory               `protobuf:"varint,16,opt,name=category,enum=lolstats.GoalCategory" json:"category,omitempty"`
	LastValue              float64                    `protobuf:"fixed64,17,opt,name=last_value,json=lastValue" json:"last_value,omitempty"`
}

func (m *Goal) Reset()                    { *m = Goal{} }
func (m *Goal) String() string            { return proto.CompactTextString(m) }
func (*Goal) ProtoMessage()               {}
func (*Goal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Goal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Goal) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Goal) GetLastUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

func (m *Goal) GetStatus() GoalStatus {
	if m != nil {
		return m.Status
	}
	return GoalStatus_STATUS_NONE
}

func (m *Goal) GetSummonerId() int64 {
	if m != nil {
		return m.SummonerId
	}
	return 0
}

func (m *Goal) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Goal) GetUnderlyingStat() string {
	if m != nil {
		return m.UnderlyingStat
	}
	return ""
}

func (m *Goal) GetTargetValue() float64 {
	if m != nil {
		return m.TargetValue
	}
	return 0
}

func (m *Goal) GetComparator() GoalComparator {
	if m != nil {
		return m.Comparator
	}
	return GoalComparator_COMPARATOR_NONE
}

func (m *Goal) GetAchievementCount() int64 {
	if m != nil {
		return m.AchievementCount
	}
	return 0
}

func (m *Goal) GetTargetAchievementCount() int64 {
	if m != nil {
		return m.TargetAchievementCount
	}
	return 0
}

func (m *Goal) GetImportanceWeight() float64 {
	if m != nil {
		return m.ImportanceWeight
	}
	return 0
}

func (m *Goal) GetRolePosition() string {
	if m != nil {
		return m.RolePosition
	}
	return ""
}

func (m *Goal) GetChampionId() int64 {
	if m != nil {
		return m.ChampionId
	}
	return 0
}

func (m *Goal) GetCategory() GoalCategory {
	if m != nil {
		return m.Category
	}
	return GoalCategory_CATEGORY_NONE
}

func (m *Goal) GetLastValue() float64 {
	if m != nil {
		return m.LastValue
	}
	return 0
}

type CountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *CountResponse) Reset()                    { *m = CountResponse{} }
func (m *CountResponse) String() string            { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()               {}
func (*CountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SimpleResponse struct {
}

func (m *SimpleResponse) Reset()                    { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string            { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()               {}
func (*SimpleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func init() {
	proto.RegisterType((*MatchSummary)(nil), "lolstats.MatchSummary")
	proto.RegisterType((*BasicStats)(nil), "lolstats.BasicStats")
	proto.RegisterType((*AdvancedStats)(nil), "lolstats.AdvancedStats")
	proto.RegisterType((*TeamAdvancedStats)(nil), "lolstats.TeamAdvancedStats")
	proto.RegisterType((*HistoryRequest)(nil), "lolstats.HistoryRequest")
	proto.RegisterType((*HistoryResponse)(nil), "lolstats.HistoryResponse")
	proto.RegisterType((*StatsRequest)(nil), "lolstats.StatsRequest")
	proto.RegisterType((*StatListResponse)(nil), "lolstats.StatListResponse")
	proto.RegisterType((*StatListResponse_StatList)(nil), "lolstats.StatListResponse.StatList")
	proto.RegisterType((*MatchRequest)(nil), "lolstats.MatchRequest")
	proto.RegisterType((*DetailsResponse)(nil), "lolstats.DetailsResponse")
	proto.RegisterType((*TeamRequest)(nil), "lolstats.TeamRequest")
	proto.RegisterType((*TeamDetailsResponse)(nil), "lolstats.TeamDetailsResponse")
	proto.RegisterType((*SearchRequest)(nil), "lolstats.SearchRequest")
	proto.RegisterType((*ReplayEntry)(nil), "lolstats.ReplayEntry")
	proto.RegisterType((*SearchResponse)(nil), "lolstats.SearchResponse")
	proto.RegisterType((*GoalCreateStatsRequest)(nil), "lolstats.GoalCreateStatsRequest")
	proto.RegisterType((*GoalCreateCustomRequest)(nil), "lolstats.GoalCreateCustomRequest")
	proto.RegisterType((*GoalGetRequest)(nil), "lolstats.GoalGetRequest")
	proto.RegisterType((*GoalGetResponse)(nil), "lolstats.GoalGetResponse")
	proto.RegisterType((*GoalUpdateStatusRequest)(nil), "lolstats.GoalUpdateStatusRequest")
	proto.RegisterType((*GoalDeleteRequest)(nil), "lolstats.GoalDeleteRequest")
	proto.RegisterType((*Goal)(nil), "lolstats.Goal")
	proto.RegisterType((*CountResponse)(nil), "lolstats.CountResponse")
	proto.RegisterType((*SimpleResponse)(nil), "lolstats.SimpleResponse")
	proto.RegisterEnum("lolstats.GoalStatus", GoalStatus_name, GoalStatus_value)
	proto.RegisterEnum("lolstats.GoalComparator", GoalComparator_name, GoalComparator_value)
	proto.RegisterEnum("lolstats.GoalCategory", GoalCategory_name, GoalCategory_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Lolstats service

type LolstatsClient interface {
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	Percentiles(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatListResponse, error)
	Details(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*DetailsResponse, error)
	Advanced(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*AdvancedStats, error)
	SummonerMatches(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatListResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	TeamDetails(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*TeamDetailsResponse, error)
	TeamAdvanced(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*TeamAdvancedStats, error)
}

type lolstatsClient struct {
	cc *grpc.ClientConn
}

func NewLolstatsClient(cc *grpc.ClientConn) LolstatsClient {
	return &lolstatsClient{cc}
}

func (c *lolstatsClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolstats/History", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolstatsClient) Percentiles(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatListResponse, error) {
	out := new(StatListResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolstats/Percentiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolstatsClient) Details(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*DetailsResponse, error) {
	out := new(DetailsResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolstats/Details", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolstatsClient) Advanced(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*AdvancedStats, error) {
	out := new(AdvancedStats)
	err := grpc.Invoke(ctx, "/lolstats.Lolstats/Advanced", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolstatsClient) SummonerMatches(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatListResponse, error) {
	out := new(StatListResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolstats/SummonerMatches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolstatsClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolstats/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolstatsClient) TeamDetails(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*TeamDetailsResponse, error) {
	out := new(TeamDetailsResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolstats/TeamDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolstatsClient) TeamAdvanced(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*TeamAdvancedStats, error) {
	out := new(TeamAdvancedStats)
	err := grpc.Invoke(ctx, "/lolstats.Lolstats/TeamAdvanced", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lolstats service

type LolstatsServer interface {
	History(context.Context, *HistoryRequest) (*HistoryResponse, error)
	Percentiles(context.Context, *StatsRequest) (*StatListResponse, error)
	Details(context.Context, *MatchRequest) (*DetailsResponse, error)
	Advanced(context.Context, *MatchRequest) (*AdvancedStats, error)
	SummonerMatches(context.Context, *StatsRequest) (*StatListResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	TeamDetails(context.Context, *TeamRequest) (*TeamDetailsResponse, error)
	TeamAdvanced(context.Context, *TeamRequest) (*TeamAdvancedStats, error)
}

func RegisterLolstatsServer(s *grpc.Server, srv LolstatsServer) {
	s.RegisterService(&_Lolstats_serviceDesc, srv)
}

func _Lolstats_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolstatsServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolstats/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolstatsServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolstats_Percentiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolstatsServer).Percentiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolstats/Percentiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolstatsServer).Percentiles(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolstats_Details_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolstatsServer).Details(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolstats/Details",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolstatsServer).Details(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolstats_Advanced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolstatsServer).Advanced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolstats/Advanced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolstatsServer).Advanced(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolstats_SummonerMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolstatsServer).SummonerMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolstats/SummonerMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolstatsServer).SummonerMatches(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolstats_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolstatsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolstats/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolstatsServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolstats_TeamDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolstatsServer).TeamDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolstats/TeamDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolstatsServer).TeamDetails(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolstats_TeamAdvanced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolstatsServer).TeamAdvanced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolstats/TeamAdvanced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolstatsServer).TeamAdvanced(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lolstats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lolstats.Lolstats",
	HandlerType: (*LolstatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "History",
			Handler:    _Lolstats_History_Handler,
		},
		{
			MethodName: "Percentiles",
			Handler:    _Lolstats_Percentiles_Handler,
		},
		{
			MethodName: "Details",
			Handler:    _Lolstats_Details_Handler,
		},
		{
			MethodName: "Advanced",
			Handler:    _Lolstats_Advanced_Handler,
		},
		{
			MethodName: "SummonerMatches",
			Handler:    _Lolstats_SummonerMatches_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Lolstats_Search_Handler,
		},
		{
			MethodName: "TeamDetails",
			Handler:    _Lolstats_TeamDetails_Handler,
		},
		{
			MethodName: "TeamAdvanced",
			Handler:    _Lolstats_TeamAdvanced_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lolstats.proto",
}

// Client API for Lolgoals service

type LolgoalsClient interface {
	CreateStats(ctx context.Context, in *GoalCreateStatsRequest, opts ...grpc.CallOption) (*CountResponse, error)
	CreateCustom(ctx context.Context, in *GoalCreateCustomRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	Get(ctx context.Context, in *GoalGetRequest, opts ...grpc.CallOption) (*GoalGetResponse, error)
	UpdateStatus(ctx context.Context, in *GoalUpdateStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	Delete(ctx context.Context, in *GoalDeleteRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type lolgoalsClient struct {
	cc *grpc.ClientConn
}

func NewLolgoalsClient(cc *grpc.ClientConn) LolgoalsClient {
	return &lolgoalsClient{cc}
}

func (c *lolgoalsClient) CreateStats(ctx context.Context, in *GoalCreateStatsRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolgoals/CreateStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolgoalsClient) CreateCustom(ctx context.Context, in *GoalCreateCustomRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolgoals/CreateCustom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolgoalsClient) Get(ctx context.Context, in *GoalGetRequest, opts ...grpc.CallOption) (*GoalGetResponse, error) {
	out := new(GoalGetResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolgoals/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolgoalsClient) UpdateStatus(ctx context.Context, in *GoalUpdateStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolgoals/UpdateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolgoalsClient) Delete(ctx context.Context, in *GoalDeleteRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/lolstats.Lolgoals/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lolgoals service

type LolgoalsServer interface {
	CreateStats(context.Context, *GoalCreateStatsRequest) (*CountResponse, error)
	CreateCustom(context.Context, *GoalCreateCustomRequest) (*SimpleResponse, error)
	Get(context.Context, *GoalGetRequest) (*GoalGetResponse, error)
	UpdateStatus(context.Context, *GoalUpdateStatusRequest) (*SimpleResponse, error)
	Delete(context.Context, *GoalDeleteRequest) (*SimpleResponse, error)
}

func RegisterLolgoalsServer(s *grpc.Server, srv LolgoalsServer) {
	s.RegisterService(&_Lolgoals_serviceDesc, srv)
}

func _Lolgoals_CreateStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalCreateStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolgoalsServer).CreateStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolgoals/CreateStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolgoalsServer).CreateStats(ctx, req.(*GoalCreateStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolgoals_CreateCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalCreateCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolgoalsServer).CreateCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolgoals/CreateCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolgoalsServer).CreateCustom(ctx, req.(*GoalCreateCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolgoals_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolgoalsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolgoals/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolgoalsServer).Get(ctx, req.(*GoalGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolgoals_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolgoalsServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolgoals/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolgoalsServer).UpdateStatus(ctx, req.(*GoalUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lolgoals_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolgoalsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolstats.Lolgoals/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolgoalsServer).Delete(ctx, req.(*GoalDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lolgoals_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lolstats.Lolgoals",
	HandlerType: (*LolgoalsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStats",
			Handler:    _Lolgoals_CreateStats_Handler,
		},
		{
			MethodName: "CreateCustom",
			Handler:    _Lolgoals_CreateCustom_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Lolgoals_Get_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Lolgoals_UpdateStatus_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Lolgoals_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lolstats.proto",
}

func init() { proto.RegisterFile("lolstats.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x58, 0x4b, 0x73, 0xe3, 0xc6,
	0x11, 0x16, 0x48, 0xf1, 0xd5, 0xa4, 0x48, 0x6a, 0xf4, 0xc2, 0x72, 0xb3, 0x65, 0x19, 0x6b, 0x27,
	0x2a, 0x39, 0xd1, 0x6e, 0x29, 0xa9, 0x64, 0xe3, 0xf2, 0xba, 0x42, 0x53, 0x28, 0xad, 0x6c, 0x89,
	0x52, 0x40, 0xae, 0xb7, 0x92, 0x54, 0x82, 0xc2, 0x12, 0x43, 0x0a, 0x65, 0x00, 0x03, 0x03, 0x03,
	0x79, 0x99, 0x7f, 0x90, 0x4b, 0x2e, 0x39, 0xe5, 0x90, 0x9b, 0x73, 0xc8, 0x21, 0x3f, 0x22, 0xff,
	0x22, 0x3f, 0x22, 0xd7, 0xdc, 0x72, 0x48, 0xcd, 0x0c, 0xde, 0x7c, 0xec, 0xc6, 0x76, 0xf6, 0x86,
	0xee, 0x69, 0x4c, 0xf7, 0x74, 0xf7, 0xf7, 0xcd, 0x03, 0xda, 0x36, 0xb1, 0x03, 0x6a, 0xd0, 0xe0,
	0xc4, 0xf3, 0x09, 0x25, 0xa8, 0x1e, 0xcb, 0xbd, 0x77, 0x66, 0x84, 0xcc, 0x6c, 0xfc, 0x88, 0xeb,
	0x5f, 0x86, 0xd3, 0x47, 0xd4, 0x72, 0x70, 0x40, 0x0d, 0xc7, 0x13, 0xa6, 0xca, 0xd7, 0x15, 0x68,
	0x5d, 0x19, 0x74, 0x72, 0x3b, 0x0a, 0x1d, 0xc7, 0xf0, 0xe7, 0xe8, 0x1d, 0x68, 0x06, 0xa1, 0xe3,
	0x10, 0x17, 0xfb, 0xba, 0x65, 0xca, 0xd2, 0xa1, 0x74, 0x54, 0xd6, 0x20, 0x56, 0x5d, 0x98, 0xa8,
	0x07, 0x75, 0xcf, 0x36, 0xe8, 0x94, 0xf8, 0x8e, 0x5c, 0x3a, 0x94, 0x8e, 0x1a, 0x5a, 0x22, 0xa3,
	0xf7, 0xa1, 0xed, 0xb0, 0xc9, 0xf4, 0x89, 0x8f, 0x0d, 0x6a, 0x11, 0x57, 0xde, 0xe4, 0xff, 0x6f,
	0x71, 0xed, 0x20, 0x52, 0x32, 0x1f, 0x93, 0x5b, 0xc3, 0xf1, 0x2c, 0xe2, 0x32, 0x1f, 0x95, 0x43,
	0xe9, 0xa8, 0xa2, 0x41, 0xac, 0xba, 0x30, 0x11, 0x82, 0x4d, 0xdb, 0x70, 0xb1, 0x5c, 0xe5, 0xf3,
	0xf3, 0x6f, 0x36, 0x77, 0xfa, 0x93, 0x6b, 0xe2, 0x57, 0x72, 0x8d, 0xff, 0xb7, 0x95, 0xfc, 0xc7,
	0x94, 0x68, 0x0f, 0xaa, 0x8e, 0xe1, 0xb1, 0x69, 0xeb, 0x7c, 0xb8, 0xe2, 0x18, 0xde, 0x85, 0x99,
	0x46, 0x66, 0x86, 0xbe, 0x88, 0xac, 0x71, 0x28, 0x1d, 0x49, 0x51, 0x64, 0x67, 0x91, 0x12, 0xdd,
	0x83, 0xba, 0x30, 0xb3, 0x4c, 0x19, 0x78, 0xe8, 0x35, 0x2e, 0x5f, 0x98, 0xe8, 0x01, 0x80, 0x18,
	0x72, 0x88, 0x89, 0xe5, 0x26, 0x8f, 0xac, 0xc1, 0x35, 0x57, 0xc4, 0xc4, 0xe9, 0x30, 0x9d, 0x7b,
	0x58, 0x6e, 0x65, 0x86, 0xc7, 0x73, 0x0f, 0xa3, 0x87, 0x20, 0x3c, 0xe9, 0x77, 0xd8, 0x0f, 0x98,
	0xfb, 0x2d, 0x6e, 0xd1, 0xe2, 0xca, 0xcf, 0x85, 0x0e, 0x3d, 0x86, 0x5d, 0xe2, 0x79, 0xc4, 0xc5,
	0x2e, 0xd5, 0xb3, 0x09, 0xea, 0xf0, 0x95, 0xa0, 0x78, 0x6c, 0x90, 0x26, 0xea, 0x01, 0xc0, 0x97,
	0x21, 0x0e, 0xb1, 0xf0, 0xda, 0x15, 0x5e, 0xb9, 0x86, 0x7b, 0x45, 0xb0, 0xe9, 0x13, 0x1b, 0xcb,
	0xdb, 0x22, 0x8f, 0xec, 0x9b, 0x45, 0x92, 0x14, 0xd8, 0x35, 0x1c, 0x2c, 0x23, 0x11, 0x49, 0xac,
	0x1c, 0x1a, 0x0e, 0x46, 0xfb, 0x50, 0xfd, 0xca, 0x72, 0x5d, 0xec, 0xcb, 0x3b, 0x87, 0xd2, 0x51,
	0x5d, 0x8b, 0x24, 0x36, 0x21, 0xb5, 0xb0, 0x2f, 0xef, 0x8a, 0x09, 0xd9, 0x37, 0x6b, 0x08, 0xd3,
	0xba, 0xb3, 0xf8, 0xaa, 0xf6, 0x44, 0x43, 0xc4, 0x32, 0xda, 0x85, 0xca, 0x17, 0x96, 0x6d, 0x07,
	0xf2, 0x3e, 0x4f, 0xa6, 0x10, 0xd8, 0xec, 0x26, 0x36, 0xe8, 0x6d, 0x20, 0x1f, 0x70, 0x75, 0x24,
	0x21, 0x19, 0x6a, 0x46, 0x10, 0x58, 0x01, 0x0d, 0x64, 0x59, 0x24, 0x3f, 0x12, 0x95, 0x63, 0x80,
	0x4f, 0x8c, 0xc0, 0x9a, 0x8c, 0x58, 0x57, 0xa3, 0xef, 0x41, 0x83, 0xb7, 0xf7, 0xa7, 0x01, 0x71,
	0x79, 0x87, 0x36, 0xb4, 0x54, 0xa1, 0xfc, 0x08, 0xb6, 0xfa, 0xe6, 0x9d, 0xe1, 0x4e, 0xb0, 0xf9,
	0x26, 0xe6, 0x7f, 0x92, 0x60, 0x7b, 0x8c, 0x0d, 0x27, 0xff, 0xcf, 0x27, 0x50, 0xf3, 0x71, 0x10,
	0xda, 0x34, 0x90, 0xa5, 0xc3, 0xf2, 0x51, 0xf3, 0xf4, 0xe8, 0x24, 0x01, 0xd9, 0x82, 0xf5, 0x89,
	0x26, 0x4c, 0x55, 0x97, 0xfa, 0x73, 0x2d, 0xfe, 0xb1, 0xf7, 0x21, 0xb4, 0xb2, 0x03, 0xa8, 0x0b,
	0xe5, 0x2f, 0xf0, 0x3c, 0x82, 0x14, 0xfb, 0x64, 0xe9, 0xb9, 0x33, 0xec, 0x10, 0x47, 0x40, 0x12,
	0xc2, 0x87, 0xa5, 0x27, 0x92, 0xf2, 0x67, 0x09, 0xda, 0xcf, 0xac, 0x80, 0x12, 0x7f, 0xae, 0xe1,
	0x2f, 0x43, 0x1c, 0xd0, 0x6f, 0x87, 0xcc, 0x5d, 0xa8, 0xd8, 0x96, 0x63, 0x51, 0xb9, 0x2c, 0x50,
	0xc1, 0x05, 0x56, 0x88, 0x49, 0xe8, 0x07, 0xc4, 0xe7, 0x18, 0x6c, 0x68, 0x91, 0xc4, 0x32, 0x96,
	0x34, 0x51, 0x04, 0xc2, 0x54, 0xa1, 0xfc, 0x06, 0x3a, 0x49, 0x68, 0x81, 0x47, 0xdc, 0x00, 0xa3,
	0xc7, 0x20, 0x70, 0x82, 0xe3, 0x74, 0xed, 0xa7, 0xe9, 0xca, 0xd2, 0x8b, 0x16, 0x9b, 0x65, 0x5c,
	0x97, 0xb2, 0xae, 0x95, 0x3f, 0x96, 0xa1, 0xc5, 0x93, 0x1a, 0x2f, 0x5b, 0x86, 0x5a, 0x80, 0x6d,
	0x3c, 0x89, 0x2a, 0xd1, 0xd0, 0x62, 0x71, 0xed, 0x7a, 0xf3, 0xc0, 0x28, 0x17, 0x81, 0xf1, 0x2e,
	0xb4, 0x3c, 0x0e, 0x47, 0xcf, 0xc7, 0x53, 0xeb, 0x15, 0xa7, 0xa9, 0x86, 0xd6, 0xe4, 0xba, 0x1b,
	0xae, 0x62, 0x44, 0x62, 0x1b, 0x01, 0xd5, 0xdd, 0x88, 0x9f, 0x2a, 0x4c, 0x1a, 0x26, 0x08, 0xa8,
	0xae, 0x40, 0x40, 0xad, 0x80, 0x80, 0x98, 0xca, 0xea, 0x19, 0x2a, 0x8b, 0x61, 0xd9, 0xc8, 0xc0,
	0xb2, 0xc0, 0x89, 0xb0, 0xc0, 0x89, 0xab, 0xc8, 0xa1, 0xb9, 0x92, 0x1c, 0x0a, 0x0d, 0xd3, 0x5a,
	0x68, 0x98, 0x87, 0xb0, 0xc5, 0x7c, 0xeb, 0x1e, 0x09, 0x2c, 0x9a, 0x21, 0x25, 0xa6, 0xbc, 0x89,
	0x74, 0xca, 0xbf, 0x24, 0xe8, 0xb2, 0x82, 0x5c, 0x5a, 0x01, 0x4d, 0xea, 0xfd, 0x31, 0x54, 0x45,
	0x97, 0x47, 0xe5, 0xfe, 0x7e, 0x5a, 0xee, 0xa2, 0x6d, 0x04, 0x0e, 0x81, 0x8d, 0xe8, 0x2f, 0xd6,
	0x8e, 0x13, 0x12, 0xba, 0x94, 0xd7, 0xad, 0xac, 0x09, 0xa1, 0xa7, 0x40, 0x3d, 0xfe, 0x9b, 0xf5,
	0x07, 0x47, 0x83, 0xa8, 0xba, 0xa4, 0x45, 0x52, 0xef, 0x77, 0xd0, 0xcc, 0x4c, 0x98, 0xc5, 0x54,
	0x43, 0x60, 0xea, 0xe7, 0x59, 0x4c, 0x35, 0x4f, 0x1f, 0xae, 0x89, 0x2c, 0x51, 0x64, 0x80, 0x37,
	0x8d, 0xf6, 0xc3, 0xef, 0x04, 0x75, 0xd9, 0xed, 0xa4, 0x9c, 0xdb, 0x4e, 0x94, 0xa7, 0xd0, 0x39,
	0xc3, 0xd4, 0xb0, 0xec, 0x20, 0x49, 0xea, 0x31, 0x54, 0x5e, 0x32, 0x92, 0xe3, 0x4e, 0x9a, 0xa7,
	0xbb, 0x69, 0xe4, 0x29, 0xf7, 0x69, 0xc2, 0x44, 0xf9, 0x2d, 0x34, 0x19, 0x0d, 0xc5, 0x51, 0x1e,
	0x40, 0x8d, 0x62, 0xc3, 0x49, 0x23, 0xac, 0x32, 0xf1, 0x9b, 0x47, 0xf7, 0x77, 0x09, 0x76, 0xd8,
	0xfc, 0xc5, 0x10, 0xcf, 0x8a, 0xb4, 0x78, 0x9c, 0xa7, 0xc5, 0x82, 0xfd, 0x0a, 0x62, 0xbc, 0x79,
	0x2d, 0x31, 0x1e, 0xe7, 0x8b, 0xb8, 0x22, 0x15, 0x69, 0xd5, 0xfe, 0x53, 0x82, 0xad, 0x11, 0x36,
	0xfc, 0xb4, 0x6e, 0xd9, 0x85, 0x4b, 0x6b, 0xc9, 0xa1, 0xf4, 0x3a, 0x72, 0x28, 0xaf, 0x23, 0x07,
	0x71, 0xc0, 0x89, 0xc8, 0x61, 0x17, 0x2a, 0x8c, 0x10, 0x02, 0xb9, 0xc2, 0x99, 0x4a, 0x08, 0x8b,
	0x30, 0xab, 0x2e, 0xc2, 0xac, 0x88, 0xff, 0x9a, 0xe8, 0xb3, 0x37, 0xc0, 0x7f, 0x9d, 0x5b, 0x2e,
	0xc3, 0xff, 0x3d, 0xa8, 0x53, 0xe2, 0xe9, 0x2c, 0x6f, 0x11, 0xd5, 0xd4, 0x28, 0xf1, 0x58, 0xee,
	0x58, 0x06, 0x66, 0x84, 0x98, 0xba, 0xd8, 0x9c, 0x81, 0x47, 0xdb, 0x60, 0x9a, 0xcf, 0xf8, 0x06,
	0x7d, 0x02, 0x3b, 0xf8, 0xd5, 0xc4, 0x0e, 0x4d, 0xac, 0x67, 0x9b, 0xbf, 0xc9, 0x5d, 0x6d, 0x47,
	0x43, 0xa3, 0x04, 0x03, 0xca, 0x3f, 0x4b, 0x0c, 0x95, 0x9e, 0x6d, 0xcc, 0x45, 0x41, 0xb3, 0x9d,
	0x25, 0xe5, 0x8f, 0x51, 0xeb, 0x1a, 0x72, 0xd5, 0x12, 0xcb, 0x2b, 0x97, 0xf8, 0x18, 0xf6, 0x66,
	0xc4, 0x36, 0x75, 0xd3, 0x9a, 0x4e, 0xf5, 0xdf, 0x63, 0x9f, 0xe8, 0x94, 0xe8, 0x14, 0x8b, 0xb2,
	0x48, 0xda, 0x36, 0x1b, 0x3c, 0xb3, 0xa6, 0xd3, 0x5f, 0x63, 0x9f, 0x8c, 0xc9, 0x18, 0xbb, 0x68,
	0x90, 0x5b, 0x79, 0x85, 0x37, 0xf1, 0x7b, 0x69, 0x7b, 0x65, 0x56, 0x71, 0x72, 0x1e, 0xe7, 0x43,
	0xb4, 0x6f, 0x26, 0x3f, 0xcb, 0x36, 0x81, 0x03, 0xa8, 0x4d, 0x02, 0x1e, 0x08, 0x2f, 0x9e, 0xa4,
	0x55, 0x27, 0x01, 0x73, 0xdd, 0xfb, 0x08, 0xda, 0xf9, 0x99, 0x96, 0x90, 0x56, 0xee, 0x20, 0x50,
	0xce, 0x76, 0xf6, 0x0b, 0x68, 0xc7, 0x8d, 0x1d, 0x61, 0xf0, 0x51, 0x11, 0x83, 0x7b, 0x4b, 0xc3,
	0x4f, 0xe0, 0xb6, 0x9c, 0x6c, 0x95, 0x3f, 0x94, 0x60, 0xff, 0x9c, 0x18, 0x36, 0x3f, 0x95, 0xe3,
	0xdc, 0x96, 0xfb, 0xad, 0x38, 0x6f, 0xa1, 0xdb, 0xcb, 0x4b, 0xba, 0xfd, 0x3e, 0x34, 0xdc, 0xd0,
	0xd1, 0x67, 0xc4, 0xb0, 0x83, 0x08, 0x42, 0x75, 0x37, 0x74, 0x58, 0x3c, 0x01, 0x7a, 0x02, 0x32,
	0x35, 0xfc, 0x19, 0xa6, 0xba, 0x31, 0xb9, 0xb5, 0xf0, 0x1d, 0x76, 0x78, 0x43, 0xf0, 0x25, 0x54,
	0xb8, 0xed, 0xbe, 0x18, 0xef, 0xa7, 0xc3, 0x03, 0x36, 0x8a, 0x7e, 0x0a, 0x30, 0x31, 0x28, 0x9e,
	0x11, 0xdf, 0xc2, 0x81, 0x5c, 0x3d, 0x2c, 0x1f, 0xb5, 0xb3, 0x27, 0x11, 0xbe, 0x5c, 0x31, 0x3e,
	0xd7, 0x32, 0x96, 0xca, 0xd7, 0x12, 0x1c, 0xa4, 0xb9, 0x18, 0x84, 0x01, 0x25, 0xce, 0xdb, 0x4b,
	0xc6, 0x0f, 0xa0, 0x13, 0xba, 0x26, 0xf6, 0xed, 0xb9, 0xe5, 0xce, 0x04, 0x5c, 0xc5, 0x79, 0xa4,
	0x9d, 0xaa, 0x59, 0x7d, 0x94, 0x7f, 0x48, 0xac, 0x95, 0x0c, 0xfb, 0x1c, 0xd3, 0xb7, 0x17, 0x5d,
	0x81, 0x98, 0x36, 0x17, 0x88, 0xe9, 0x87, 0x50, 0x65, 0x31, 0x87, 0x01, 0x2f, 0x4e, 0x3b, 0x4b,
	0xd6, 0x2c, 0xd8, 0x11, 0x1f, 0xd3, 0x22, 0x1b, 0xe5, 0x67, 0xd0, 0x49, 0x96, 0x10, 0x35, 0xf4,
	0x7b, 0x50, 0x11, 0x8d, 0x20, 0xda, 0xb9, 0x9d, 0xff, 0x5f, 0x13, 0x83, 0xca, 0x5f, 0xa2, 0x1a,
	0x3d, 0xf7, 0xcc, 0xa8, 0x5f, 0xc3, 0xef, 0xa6, 0x61, 0x0f, 0xa0, 0xc6, 0x3c, 0xc4, 0x44, 0xd3,
	0xd0, 0xaa, 0x4c, 0xcc, 0x2d, 0x6c, 0xf3, 0x0d, 0x16, 0x66, 0xc1, 0x36, 0xd3, 0x9e, 0x61, 0x1b,
	0x53, 0xfc, 0x7f, 0x0d, 0x4c, 0xf9, 0x5b, 0x05, 0x36, 0x99, 0x2f, 0xd4, 0x86, 0x52, 0x34, 0x6b,
	0x43, 0x2b, 0x59, 0x26, 0xfa, 0x09, 0xd4, 0xf8, 0xcd, 0x1b, 0x9b, 0xd1, 0xc6, 0xd9, 0x3b, 0x11,
	0x0f, 0x00, 0x27, 0xf1, 0x03, 0xc0, 0xc9, 0x38, 0x7e, 0x00, 0xd0, 0x62, 0x53, 0xf4, 0x14, 0x5a,
	0x7c, 0x33, 0x0b, 0x79, 0x66, 0x85, 0xb3, 0xf5, 0xbf, 0x36, 0x99, 0xbd, 0x28, 0xc4, 0xff, 0x98,
	0xa6, 0x62, 0x46, 0x2a, 0x6b, 0x33, 0x52, 0x2d, 0x64, 0x64, 0x09, 0x52, 0x6a, 0xcb, 0x90, 0xc2,
	0xb6, 0xf0, 0x88, 0x42, 0x04, 0xad, 0xd6, 0x39, 0x23, 0x37, 0x85, 0xee, 0x73, 0xa6, 0x42, 0x4f,
	0x00, 0x26, 0xc4, 0xf1, 0x0c, 0xdf, 0xa0, 0xc4, 0xe7, 0xfb, 0x63, 0xfb, 0x54, 0x2e, 0x70, 0x45,
	0x32, 0xae, 0x65, 0x6c, 0xd1, 0x07, 0xb0, 0xbd, 0x48, 0x4c, 0xe2, 0xb5, 0xa0, 0x6b, 0x14, 0x29,
	0x69, 0x1d, 0x99, 0x35, 0xd7, 0x92, 0xd9, 0x07, 0xb0, 0x6d, 0x39, 0x1e, 0xf1, 0x29, 0xbb, 0x68,
	0xea, 0x5f, 0x61, 0x6b, 0x76, 0x4b, 0xf9, 0x21, 0x5e, 0xd2, 0xba, 0xe9, 0xc0, 0x0b, 0xae, 0x5f,
	0x84, 0x72, 0xfb, 0xf5, 0x50, 0xee, 0x2c, 0x40, 0xf9, 0x14, 0xea, 0x11, 0x2b, 0xce, 0xf9, 0x63,
	0xc2, 0x6a, 0xf6, 0x4c, 0xec, 0xd8, 0x51, 0x82, 0x77, 0x8f, 0x48, 0xf4, 0x36, 0x8f, 0xaf, 0xc1,
	0x34, 0x3c, 0xcd, 0xca, 0xfb, 0xb0, 0xc5, 0x97, 0x93, 0xa0, 0x3d, 0xd9, 0x8d, 0xa4, 0xec, 0x6e,
	0xd4, 0x85, 0xf6, 0xc8, 0x72, 0x3c, 0x1b, 0xc7, 0x76, 0xc7, 0x53, 0x80, 0xb4, 0x7d, 0x50, 0x07,
	0x9a, 0xa3, 0x71, 0x7f, 0xfc, 0x7c, 0xa4, 0x0f, 0xaf, 0x87, 0x6a, 0x77, 0x03, 0xd5, 0xa0, 0x3c,
	0x54, 0x5f, 0x74, 0x25, 0xd4, 0x82, 0x7a, 0x7f, 0x30, 0x50, 0x6f, 0xc6, 0xea, 0x59, 0xb7, 0x84,
	0xb6, 0xa0, 0x31, 0xb8, 0xbe, 0xba, 0xb9, 0x54, 0x99, 0xb8, 0xc9, 0xc5, 0xfe, 0x70, 0xa0, 0x5e,
	0x5e, 0xaa, 0x67, 0xdd, 0x0a, 0x42, 0xd0, 0x4e, 0x46, 0xf5, 0x91, 0xaa, 0x0e, 0xbb, 0xd5, 0xe3,
	0xb9, 0xe0, 0xd4, 0xb4, 0xd6, 0x68, 0x07, 0x3a, 0xcc, 0xaa, 0xaf, 0xf5, 0xc7, 0xd7, 0x5a, 0xec,
	0xaf, 0x0b, 0xad, 0x73, 0x4d, 0xed, 0x8f, 0x55, 0x4d, 0x1f, 0x3f, 0xeb, 0x0f, 0xbb, 0x12, 0xba,
	0x07, 0x7b, 0x59, 0x8d, 0x7e, 0xad, 0xe9, 0xea, 0x2f, 0x9f, 0xf7, 0x2f, 0xbb, 0x25, 0xb4, 0x0f,
	0xe8, 0x52, 0x1d, 0x8d, 0x0a, 0xfa, 0x32, 0x0b, 0x27, 0xd1, 0x77, 0x37, 0x8f, 0x55, 0x68, 0x65,
	0x93, 0x8a, 0xb6, 0x61, 0x6b, 0xd0, 0x1f, 0xab, 0xe7, 0xd7, 0xda, 0xaf, 0x62, 0xb7, 0x3b, 0xd0,
	0x39, 0x53, 0x07, 0x17, 0xa3, 0x8b, 0xeb, 0xa1, 0x7e, 0xd5, 0xff, 0xec, 0x62, 0x78, 0xde, 0x95,
	0xd8, 0x34, 0x57, 0xea, 0xe0, 0x59, 0x7f, 0x78, 0x31, 0x18, 0x75, 0x4b, 0xa7, 0x7f, 0xdd, 0x84,
	0xfa, 0x65, 0x54, 0x25, 0xf4, 0x0b, 0xa8, 0x45, 0x97, 0x73, 0x94, 0xe9, 0xe6, 0xfc, 0x53, 0x42,
	0xef, 0xde, 0x92, 0x11, 0x91, 0x76, 0x65, 0x03, 0x0d, 0xa0, 0x79, 0x83, 0xfd, 0x09, 0x76, 0xa9,
	0x65, 0xb3, 0x8b, 0x7a, 0xfe, 0x02, 0x15, 0x73, 0x6e, 0xaf, 0xb7, 0xfa, 0x62, 0xa5, 0x6c, 0xa0,
	0x8f, 0xa1, 0x16, 0xdd, 0x05, 0x50, 0xf1, 0x29, 0x60, 0x49, 0x10, 0x85, 0x6b, 0x83, 0xb2, 0x81,
	0x9e, 0x42, 0x3d, 0x7e, 0x62, 0x59, 0x39, 0xc1, 0x41, 0xaa, 0xcf, 0x3d, 0xc7, 0x28, 0x1b, 0xe8,
	0x1c, 0x3a, 0xf1, 0xf1, 0xf4, 0x2a, 0x7e, 0x70, 0xf8, 0x46, 0xeb, 0x78, 0x0a, 0x55, 0x71, 0xfc,
	0x42, 0x19, 0x6f, 0xb9, 0x9b, 0x46, 0x4f, 0x5e, 0x1c, 0x48, 0x7e, 0x57, 0xc5, 0x35, 0x2d, 0x4e,
	0xc5, 0x5e, 0xfe, 0xb6, 0x14, 0xcf, 0xf0, 0x60, 0xed, 0x25, 0x4a, 0xd9, 0x40, 0x67, 0xd0, 0xca,
	0x3e, 0x3a, 0xad, 0x9a, 0xe7, 0xfe, 0x9a, 0x37, 0x2a, 0x65, 0xe3, 0xf4, 0xdf, 0x25, 0xde, 0x27,
	0x7c, 0x3b, 0x45, 0x9f, 0x42, 0x33, 0x73, 0xf2, 0x43, 0x87, 0x05, 0x9c, 0x2f, 0x1c, 0x0a, 0xb3,
	0xd9, 0xce, 0x01, 0x5a, 0xd9, 0x40, 0x57, 0xd0, 0xca, 0x9e, 0x9c, 0xd0, 0xbb, 0xcb, 0x26, 0xcb,
	0x9d, 0xaa, 0x72, 0x49, 0xcb, 0xe1, 0x5e, 0xd9, 0x40, 0x1f, 0x41, 0xf9, 0x1c, 0x53, 0x54, 0x20,
	0xe3, 0xf4, 0xd0, 0x93, 0xed, 0x9c, 0xc2, 0x59, 0x42, 0x04, 0x93, 0x3d, 0x22, 0x14, 0x83, 0x59,
	0x72, 0x7c, 0x58, 0x1b, 0x4c, 0x1f, 0xaa, 0x62, 0x4b, 0x47, 0xf7, 0xf3, 0x13, 0xe5, 0x36, 0xfa,
	0x75, 0x53, 0xbc, 0xac, 0xf2, 0x1d, 0xf4, 0xc7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x58,
	0x34, 0xb8, 0xa7, 0x17, 0x00, 0x00,
}
