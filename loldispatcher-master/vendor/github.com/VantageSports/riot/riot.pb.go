// Code generated by protoc-gen-go.
// source: riot.proto
// DO NOT EDIT!

/*
Package riot is a generated protocol buffer package.

It is generated from these files:
	riot.proto

It has these top-level messages:
	Summoner
	MasteryPages
	MasteryPage
	Mastery
	League
	LeagueEntry
	MiniSeries
	ChampMeta
	ChampionDescription
	ImageMeta
	SummonerSpellList
	SummonerSpell
	LevelTip
	SpellVars
*/
package riot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Summoner struct {
	Id            int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ProfileIconId int64  `protobuf:"varint,3,opt,name=profileIconId" json:"profileIconId,omitempty"`
	RevisionDate  int64  `protobuf:"varint,4,opt,name=revisionDate" json:"revisionDate,omitempty"`
	SummonerLevel int64  `protobuf:"varint,5,opt,name=summonerLevel" json:"summonerLevel,omitempty"`
}

func (m *Summoner) Reset()                    { *m = Summoner{} }
func (m *Summoner) String() string            { return proto.CompactTextString(m) }
func (*Summoner) ProtoMessage()               {}
func (*Summoner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MasteryPages struct {
	Pages      []*MasteryPage `protobuf:"bytes,1,rep,name=pages" json:"pages,omitempty"`
	SummonerId int64          `protobuf:"varint,2,opt,name=summonerId" json:"summonerId,omitempty"`
}

func (m *MasteryPages) Reset()                    { *m = MasteryPages{} }
func (m *MasteryPages) String() string            { return proto.CompactTextString(m) }
func (*MasteryPages) ProtoMessage()               {}
func (*MasteryPages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MasteryPages) GetPages() []*MasteryPage {
	if m != nil {
		return m.Pages
	}
	return nil
}

type MasteryPage struct {
	Current   bool       `protobuf:"varint,1,opt,name=current" json:"current,omitempty"`
	Id        int64      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Masteries []*Mastery `protobuf:"bytes,3,rep,name=masteries" json:"masteries,omitempty"`
	Name      string     `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *MasteryPage) Reset()                    { *m = MasteryPage{} }
func (m *MasteryPage) String() string            { return proto.CompactTextString(m) }
func (*MasteryPage) ProtoMessage()               {}
func (*MasteryPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MasteryPage) GetMasteries() []*Mastery {
	if m != nil {
		return m.Masteries
	}
	return nil
}

type Mastery struct {
	MasteryId int64 `protobuf:"varint,1,opt,name=masteryId" json:"masteryId,omitempty"`
	Rank      int64 `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
}

func (m *Mastery) Reset()                    { *m = Mastery{} }
func (m *Mastery) String() string            { return proto.CompactTextString(m) }
func (*Mastery) ProtoMessage()               {}
func (*Mastery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type League struct {
	Entries       []*LeagueEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ParticipantId string         `protobuf:"bytes,3,opt,name=participantId" json:"participantId,omitempty"`
	Queue         string         `protobuf:"bytes,4,opt,name=queue" json:"queue,omitempty"`
	Tier          string         `protobuf:"bytes,5,opt,name=tier" json:"tier,omitempty"`
}

func (m *League) Reset()                    { *m = League{} }
func (m *League) String() string            { return proto.CompactTextString(m) }
func (*League) ProtoMessage()               {}
func (*League) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *League) GetEntries() []*LeagueEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type LeagueEntry struct {
	Division         string      `protobuf:"bytes,1,opt,name=division" json:"division,omitempty"`
	IsFreshBlood     bool        `protobuf:"varint,2,opt,name=isFreshBlood" json:"isFreshBlood,omitempty"`
	IsHotStreak      bool        `protobuf:"varint,3,opt,name=isHotStreak" json:"isHotStreak,omitempty"`
	IsInactive       bool        `protobuf:"varint,4,opt,name=isInactive" json:"isInactive,omitempty"`
	IsVeteran        bool        `protobuf:"varint,5,opt,name=isVeteran" json:"isVeteran,omitempty"`
	LeaguePoints     int64       `protobuf:"varint,6,opt,name=leaguePoints" json:"leaguePoints,omitempty"`
	Losses           int64       `protobuf:"varint,7,opt,name=losses" json:"losses,omitempty"`
	MiniSeries       *MiniSeries `protobuf:"bytes,8,opt,name=miniSeries" json:"miniSeries,omitempty"`
	PlayerOrTeamId   string      `protobuf:"bytes,9,opt,name=playerOrTeamId" json:"playerOrTeamId,omitempty"`
	PlayerOrTeamName string      `protobuf:"bytes,10,opt,name=playerOrTeamName" json:"playerOrTeamName,omitempty"`
	Wins             int64       `protobuf:"varint,11,opt,name=wins" json:"wins,omitempty"`
}

func (m *LeagueEntry) Reset()                    { *m = LeagueEntry{} }
func (m *LeagueEntry) String() string            { return proto.CompactTextString(m) }
func (*LeagueEntry) ProtoMessage()               {}
func (*LeagueEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LeagueEntry) GetMiniSeries() *MiniSeries {
	if m != nil {
		return m.MiniSeries
	}
	return nil
}

type MiniSeries struct {
	Losses   int64  `protobuf:"varint,1,opt,name=losses" json:"losses,omitempty"`
	Progress string `protobuf:"bytes,2,opt,name=progress" json:"progress,omitempty"`
	Target   int64  `protobuf:"varint,3,opt,name=target" json:"target,omitempty"`
	Wins     int64  `protobuf:"varint,4,opt,name=wins" json:"wins,omitempty"`
}

func (m *MiniSeries) Reset()                    { *m = MiniSeries{} }
func (m *MiniSeries) String() string            { return proto.CompactTextString(m) }
func (*MiniSeries) ProtoMessage()               {}
func (*MiniSeries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ChampMeta struct {
	Data    map[string]*ChampionDescription `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type    string                          `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Version string                          `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (m *ChampMeta) Reset()                    { *m = ChampMeta{} }
func (m *ChampMeta) String() string            { return proto.CompactTextString(m) }
func (*ChampMeta) ProtoMessage()               {}
func (*ChampMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChampMeta) GetData() map[string]*ChampionDescription {
	if m != nil {
		return m.Data
	}
	return nil
}

type ChampionDescription struct {
	Id    int64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title string     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Name  string     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Image *ImageMeta `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Key   string     `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
}

func (m *ChampionDescription) Reset()                    { *m = ChampionDescription{} }
func (m *ChampionDescription) String() string            { return proto.CompactTextString(m) }
func (*ChampionDescription) ProtoMessage()               {}
func (*ChampionDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ChampionDescription) GetImage() *ImageMeta {
	if m != nil {
		return m.Image
	}
	return nil
}

type ImageMeta struct {
	W      int64  `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	H      int64  `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	X      int64  `protobuf:"varint,3,opt,name=x" json:"x,omitempty"`
	Y      int64  `protobuf:"varint,4,opt,name=y" json:"y,omitempty"`
	Full   string `protobuf:"bytes,5,opt,name=full" json:"full,omitempty"`
	Sprite string `protobuf:"bytes,6,opt,name=sprite" json:"sprite,omitempty"`
	Group  string `protobuf:"bytes,7,opt,name=group" json:"group,omitempty"`
}

func (m *ImageMeta) Reset()                    { *m = ImageMeta{} }
func (m *ImageMeta) String() string            { return proto.CompactTextString(m) }
func (*ImageMeta) ProtoMessage()               {}
func (*ImageMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type SummonerSpellList struct {
	Data    map[string]*SummonerSpell `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type    string                    `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Version string                    `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (m *SummonerSpellList) Reset()                    { *m = SummonerSpellList{} }
func (m *SummonerSpellList) String() string            { return proto.CompactTextString(m) }
func (*SummonerSpellList) ProtoMessage()               {}
func (*SummonerSpellList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SummonerSpellList) GetData() map[string]*SummonerSpell {
	if m != nil {
		return m.Data
	}
	return nil
}

type SummonerSpell struct {
	Cooldown     []float64 `protobuf:"fixed64,1,rep,packed,name=cooldown" json:"cooldown,omitempty"`
	CooldownBurn string    `protobuf:"bytes,2,opt,name=cooldownBurn" json:"cooldownBurn,omitempty"`
	// skip a few ...
	Id       int64      `protobuf:"varint,10,opt,name=id" json:"id,omitempty"`
	Image    *ImageMeta `protobuf:"bytes,11,opt,name=image" json:"image,omitempty"`
	Leveltip *LevelTip  `protobuf:"bytes,12,opt,name=leveltip" json:"leveltip,omitempty"`
	Maxrank  int64      `protobuf:"varint,13,opt,name=maxrank" json:"maxrank,omitempty"`
	Modes    []string   `protobuf:"bytes,14,rep,name=modes" json:"modes,omitempty"`
	Name     string     `protobuf:"bytes,15,opt,name=name" json:"name,omitempty"`
	// skip more ....
	Vars []*SpellVars `protobuf:"bytes,25,rep,name=vars" json:"vars,omitempty"`
}

func (m *SummonerSpell) Reset()                    { *m = SummonerSpell{} }
func (m *SummonerSpell) String() string            { return proto.CompactTextString(m) }
func (*SummonerSpell) ProtoMessage()               {}
func (*SummonerSpell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SummonerSpell) GetImage() *ImageMeta {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *SummonerSpell) GetLeveltip() *LevelTip {
	if m != nil {
		return m.Leveltip
	}
	return nil
}

func (m *SummonerSpell) GetVars() []*SpellVars {
	if m != nil {
		return m.Vars
	}
	return nil
}

type LevelTip struct {
	Effect []string `protobuf:"bytes,1,rep,name=effect" json:"effect,omitempty"`
	Label  []string `protobuf:"bytes,2,rep,name=label" json:"label,omitempty"`
}

func (m *LevelTip) Reset()                    { *m = LevelTip{} }
func (m *LevelTip) String() string            { return proto.CompactTextString(m) }
func (*LevelTip) ProtoMessage()               {}
func (*LevelTip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type SpellVars struct {
	Coeff     []float64 `protobuf:"fixed64,1,rep,packed,name=coeff" json:"coeff,omitempty"`
	Dyn       string    `protobuf:"bytes,2,opt,name=dyn" json:"dyn,omitempty"`
	Key       string    `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Link      string    `protobuf:"bytes,4,opt,name=link" json:"link,omitempty"`
	RanksWith string    `protobuf:"bytes,5,opt,name=ranksWith" json:"ranksWith,omitempty"`
}

func (m *SpellVars) Reset()                    { *m = SpellVars{} }
func (m *SpellVars) String() string            { return proto.CompactTextString(m) }
func (*SpellVars) ProtoMessage()               {}
func (*SpellVars) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*Summoner)(nil), "riot.Summoner")
	proto.RegisterType((*MasteryPages)(nil), "riot.MasteryPages")
	proto.RegisterType((*MasteryPage)(nil), "riot.MasteryPage")
	proto.RegisterType((*Mastery)(nil), "riot.Mastery")
	proto.RegisterType((*League)(nil), "riot.League")
	proto.RegisterType((*LeagueEntry)(nil), "riot.LeagueEntry")
	proto.RegisterType((*MiniSeries)(nil), "riot.MiniSeries")
	proto.RegisterType((*ChampMeta)(nil), "riot.ChampMeta")
	proto.RegisterType((*ChampionDescription)(nil), "riot.ChampionDescription")
	proto.RegisterType((*ImageMeta)(nil), "riot.ImageMeta")
	proto.RegisterType((*SummonerSpellList)(nil), "riot.SummonerSpellList")
	proto.RegisterType((*SummonerSpell)(nil), "riot.SummonerSpell")
	proto.RegisterType((*LevelTip)(nil), "riot.LevelTip")
	proto.RegisterType((*SpellVars)(nil), "riot.SpellVars")
}

func init() { proto.RegisterFile("riot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 974 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0x5d, 0x6f, 0x1c, 0x35,
	0x14, 0x95, 0xf7, 0x23, 0x99, 0xb9, 0x9b, 0xa4, 0xa9, 0x5b, 0xa1, 0x69, 0x84, 0xd0, 0x32, 0x7c,
	0x85, 0x56, 0x04, 0x14, 0x84, 0x54, 0xc1, 0x5b, 0x29, 0x88, 0x95, 0x52, 0xa8, 0x9c, 0xaa, 0x7d,
	0x76, 0x77, 0xbc, 0x1b, 0x2b, 0x9e, 0xf1, 0x60, 0x7b, 0x77, 0xb3, 0xcf, 0x08, 0x89, 0xbf, 0x80,
	0x90, 0xf8, 0x25, 0x3c, 0xf3, 0xbb, 0xd0, 0xb5, 0x3d, 0xb3, 0x33, 0xa4, 0xf4, 0x85, 0xb7, 0x7b,
	0xae, 0xef, 0xf8, 0x1e, 0xdf, 0x73, 0xec, 0x5d, 0x00, 0x23, 0xb5, 0x3b, 0xab, 0x8d, 0x76, 0x9a,
	0x8e, 0x30, 0xce, 0xff, 0x24, 0x90, 0x5c, 0xae, 0xca, 0x52, 0x57, 0xc2, 0xd0, 0x23, 0x18, 0xc8,
	0x22, 0x23, 0x53, 0x72, 0x3a, 0x64, 0x03, 0x59, 0x50, 0x0a, 0xa3, 0x8a, 0x97, 0x22, 0x1b, 0x4c,
	0xc9, 0x69, 0xca, 0x7c, 0x4c, 0x3f, 0x84, 0xc3, 0xda, 0xe8, 0x85, 0x54, 0x62, 0x36, 0xd7, 0xd5,
	0xac, 0xc8, 0x86, 0xbe, 0xbc, 0x9f, 0xa4, 0x39, 0x1c, 0x18, 0xb1, 0x96, 0x56, 0xea, 0xea, 0x29,
	0x77, 0x22, 0x1b, 0xf9, 0xa2, 0x5e, 0x0e, 0x77, 0xb2, 0xb1, 0xf3, 0x85, 0x58, 0x0b, 0x95, 0x8d,
	0xc3, 0x4e, 0xbd, 0x64, 0xfe, 0x0a, 0x0e, 0x9e, 0x71, 0xeb, 0x84, 0xd9, 0x3e, 0xe7, 0x4b, 0x61,
	0xe9, 0x27, 0x30, 0xae, 0x31, 0xc8, 0xc8, 0x74, 0x78, 0x3a, 0x39, 0xbf, 0x7b, 0xe6, 0x8f, 0xd4,
	0x29, 0x61, 0x61, 0x9d, 0xbe, 0x07, 0xd0, 0xec, 0x34, 0x2b, 0xfc, 0x11, 0x86, 0xac, 0x93, 0xc9,
	0x6f, 0x60, 0xd2, 0xf9, 0x8a, 0x66, 0xb0, 0x3f, 0x5f, 0x19, 0x23, 0x2a, 0xe7, 0x07, 0x90, 0xb0,
	0x06, 0xc6, 0xa9, 0x0c, 0xda, 0xa9, 0x3c, 0x82, 0xb4, 0xf4, 0x1f, 0x4a, 0x61, 0xb3, 0xa1, 0x67,
	0x71, 0xd8, 0x63, 0xc1, 0x76, 0xeb, 0xed, 0x08, 0x47, 0xbb, 0x11, 0xe6, 0xdf, 0xc0, 0x7e, 0xac,
	0xa4, 0xef, 0x36, 0x7b, 0x6d, 0x67, 0xcd, 0xe0, 0x77, 0x09, 0xfc, 0xd8, 0xf0, 0xea, 0x3a, 0xf6,
	0xf6, 0x71, 0xfe, 0x3b, 0x81, 0xbd, 0x0b, 0xc1, 0x97, 0x2b, 0x41, 0x1f, 0xc1, 0xbe, 0xa8, 0x9c,
	0xa7, 0xd1, 0x1b, 0x46, 0x58, 0xfe, 0xae, 0x72, 0x66, 0xcb, 0x9a, 0x8a, 0xff, 0xd4, 0x92, 0x1b,
	0x27, 0xe7, 0xb2, 0xe6, 0x95, 0x8b, 0x5a, 0xa6, 0xac, 0x9f, 0xa4, 0xf7, 0x61, 0xfc, 0xf3, 0x4a,
	0xac, 0x9a, 0x33, 0x04, 0x80, 0xfb, 0x39, 0x29, 0x8c, 0x17, 0x2d, 0x65, 0x3e, 0xce, 0x7f, 0x19,
	0xc2, 0xa4, 0xd3, 0x9c, 0x9e, 0x40, 0x52, 0xc8, 0xa0, 0xb8, 0x3f, 0x5c, 0xca, 0x5a, 0x8c, 0x0e,
	0x91, 0xf6, 0x7b, 0x23, 0xec, 0xd5, 0x13, 0xa5, 0x75, 0x98, 0x6f, 0xc2, 0x7a, 0x39, 0x3a, 0x85,
	0x89, 0xb4, 0x3f, 0x68, 0x77, 0xe9, 0x8c, 0xe0, 0xd7, 0x9e, 0x5d, 0xc2, 0xba, 0x29, 0x14, 0x59,
	0xda, 0x59, 0xc5, 0xe7, 0x4e, 0xae, 0x03, 0xc1, 0x84, 0x75, 0x32, 0x38, 0x5f, 0x69, 0x5f, 0x0a,
	0x27, 0x0c, 0xaf, 0x3c, 0xd5, 0x84, 0xed, 0x12, 0xc8, 0x41, 0x79, 0xba, 0xcf, 0xb5, 0xac, 0x9c,
	0xcd, 0xf6, 0x82, 0x4b, 0xbb, 0x39, 0xfa, 0x0e, 0xec, 0x29, 0x6d, 0xad, 0xb0, 0xd9, 0xbe, 0x5f,
	0x8d, 0x88, 0x7e, 0x01, 0x50, 0xca, 0x4a, 0x5e, 0x06, 0x1b, 0x24, 0x53, 0x72, 0x3a, 0x39, 0x3f,
	0x8e, 0x36, 0x68, 0xf3, 0xac, 0x53, 0x43, 0x3f, 0x86, 0xa3, 0x5a, 0xf1, 0xad, 0x30, 0x3f, 0x99,
	0x17, 0x82, 0x97, 0xb3, 0x22, 0x4b, 0xfd, 0x4c, 0xfe, 0x95, 0xa5, 0x0f, 0xe1, 0xb8, 0x9b, 0xf9,
	0x11, 0x55, 0x03, 0x5f, 0x79, 0x2b, 0x8f, 0x2a, 0x6c, 0x64, 0x65, 0xb3, 0x49, 0x70, 0x08, 0xc6,
	0xb9, 0x02, 0xd8, 0x31, 0xe8, 0xf0, 0x27, 0x3d, 0xfe, 0x27, 0x90, 0xd4, 0x46, 0x2f, 0x8d, 0xb0,
	0x36, 0x7a, 0xa2, 0xc5, 0xf8, 0x8d, 0xe3, 0x66, 0x29, 0x5c, 0xbc, 0xdc, 0x11, 0xb5, 0xdd, 0x46,
	0x9d, 0x6e, 0x7f, 0x11, 0x48, 0xbf, 0xbd, 0xe2, 0x65, 0xfd, 0x4c, 0x38, 0x4e, 0x3f, 0x83, 0x51,
	0xc1, 0x1d, 0x8f, 0x7e, 0x7c, 0x10, 0xe6, 0xd1, 0x2e, 0x9f, 0x3d, 0xe5, 0x8e, 0x07, 0x5f, 0xfa,
	0x32, 0x6f, 0xa2, 0x6d, 0xdd, 0x9a, 0x12, 0x63, 0xbc, 0x88, 0x6b, 0x61, 0xbc, 0x67, 0x82, 0x1d,
	0x1b, 0x78, 0xc2, 0x20, 0x6d, 0x37, 0xa0, 0xc7, 0x30, 0xbc, 0x16, 0xdb, 0x68, 0x2b, 0x0c, 0xe9,
	0xe7, 0x30, 0x5e, 0x73, 0xb5, 0x0a, 0xbb, 0xf5, 0x9b, 0xe3, 0x93, 0x23, 0xec, 0xdc, 0xc8, 0xda,
	0x49, 0x5d, 0xb1, 0x50, 0xf7, 0xf5, 0xe0, 0x31, 0xc9, 0x7f, 0x23, 0x70, 0xef, 0x0d, 0x25, 0xb7,
	0x9e, 0xc2, 0xfb, 0x30, 0x76, 0xd2, 0xa9, 0x86, 0x6a, 0x00, 0xed, 0xa5, 0x1a, 0x76, 0x2e, 0xd5,
	0x47, 0x30, 0x96, 0x25, 0x5f, 0x06, 0x37, 0x4e, 0xce, 0xef, 0x04, 0x1a, 0x33, 0x4c, 0xe1, 0x0c,
	0x58, 0x58, 0x6d, 0xf8, 0x8f, 0x5b, 0xfe, 0xf9, 0xaf, 0x04, 0xd2, 0xb6, 0x8c, 0x1e, 0x00, 0xd9,
	0xc4, 0xfe, 0x64, 0x83, 0xe8, 0x2a, 0x3e, 0x03, 0xe4, 0x0a, 0xd1, 0x4d, 0x94, 0x86, 0xdc, 0x20,
	0xda, 0x46, 0x49, 0xc8, 0x16, 0x29, 0x2d, 0x56, 0x4a, 0x35, 0xf7, 0x12, 0x63, 0xd4, 0xd3, 0xd6,
	0x46, 0x3a, 0xe1, 0x1d, 0x9e, 0xb2, 0x88, 0xf0, 0x50, 0x4b, 0xa3, 0x57, 0xb5, 0xb7, 0x76, 0xca,
	0x02, 0xc8, 0xff, 0x26, 0x70, 0xb7, 0xf9, 0x49, 0xb8, 0xac, 0x85, 0x52, 0x17, 0xd2, 0x3a, 0xfa,
	0x55, 0x4f, 0xd9, 0xf7, 0xc3, 0xa9, 0x6e, 0x95, 0xfd, 0x4f, 0x85, 0x2f, 0xde, 0xae, 0xf0, 0xa7,
	0x7d, 0x85, 0xef, 0xbd, 0x81, 0x44, 0x57, 0xdb, 0x3f, 0x06, 0x70, 0xd8, 0x5b, 0x44, 0xd3, 0xcf,
	0xb5, 0x56, 0x85, 0xde, 0x54, 0xfe, 0x20, 0x84, 0xb5, 0x18, 0x1f, 0x83, 0x26, 0x7e, 0xb2, 0x32,
	0x55, 0x64, 0xdc, 0xcb, 0x45, 0x57, 0x40, 0xeb, 0x8a, 0x56, 0xeb, 0xc9, 0x5b, 0xb5, 0x7e, 0x08,
	0x89, 0xc2, 0x1f, 0x33, 0x27, 0xeb, 0xec, 0xc0, 0x57, 0x1e, 0x35, 0x2f, 0xf5, 0x5a, 0xa8, 0x17,
	0xb2, 0x66, 0xed, 0x3a, 0x0e, 0xa7, 0xe4, 0x37, 0xfe, 0xd9, 0x3f, 0xf4, 0x7d, 0x1a, 0x88, 0x6a,
	0x95, 0xba, 0x10, 0x36, 0x3b, 0x9a, 0x0e, 0x51, 0x2d, 0x0f, 0x5a, 0x0b, 0xde, 0xe9, 0x58, 0xf0,
	0x03, 0x18, 0xad, 0xb9, 0xb1, 0xd9, 0x03, 0xaf, 0x55, 0x64, 0xe5, 0x27, 0xf0, 0x92, 0x1b, 0xcb,
	0xfc, 0x62, 0xfe, 0x18, 0x92, 0xa6, 0x3d, 0x1a, 0x44, 0x2c, 0x16, 0x62, 0xee, 0xfc, 0x54, 0x52,
	0x16, 0x11, 0xb6, 0x54, 0xfc, 0xb5, 0x50, 0xd9, 0x20, 0xb4, 0xf4, 0x20, 0xdf, 0x40, 0xda, 0x6e,
	0x86, 0x25, 0x73, 0x2d, 0x16, 0x8b, 0x38, 0xcf, 0x00, 0x50, 0xbb, 0x62, 0xdb, 0xcc, 0x10, 0xc3,
	0x46, 0xcd, 0xe1, 0x4e, 0x4d, 0x0a, 0x23, 0x25, 0xab, 0xeb, 0xe6, 0xa7, 0x11, 0x63, 0x7c, 0xaf,
	0xf1, 0xac, 0xf6, 0x95, 0x74, 0x57, 0xd1, 0xc2, 0xbb, 0xc4, 0xeb, 0x3d, 0xff, 0xcf, 0xe5, 0xcb,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x6b, 0xaf, 0xce, 0xc7, 0x08, 0x00, 0x00,
}
