// Code generated by protoc-gen-go.
// source: lolusers.proto
// DO NOT EDIT!

/*
Package lolusers is a generated protocol buffer package.

It is generated from these files:
	lolusers.proto

It has these top-level messages:
	SimpleResponse
	CrawlSummonersRequest
	LolUser
	LolUserRequest
	ListLolUsersRequest
	LolUserResponse
	LolUsersResponse
	VantagePointsRequest
*/
package lolusers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SimpleResponse struct {
}

func (m *SimpleResponse) Reset()                    { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string            { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()               {}
func (*SimpleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CrawlSummonersRequest struct {
	SummonerIds []int64 `protobuf:"varint,1,rep,packed,name=summoner_ids,json=summonerIds" json:"summoner_ids,omitempty"`
	Platform    string  `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
}

func (m *CrawlSummonersRequest) Reset()                    { *m = CrawlSummonersRequest{} }
func (m *CrawlSummonersRequest) String() string            { return proto.CompactTextString(m) }
func (*CrawlSummonersRequest) ProtoMessage()               {}
func (*CrawlSummonersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CrawlSummonersRequest) GetSummonerIds() []int64 {
	if m != nil {
		return m.SummonerIds
	}
	return nil
}

func (m *CrawlSummonersRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type LolUser struct {
	Id                  string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	UserId              string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SummonerId          string `protobuf:"bytes,3,opt,name=summoner_id,json=summonerId" json:"summoner_id,omitempty"`
	Region              string `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	VantagePointBalance int64  `protobuf:"varint,5,opt,name=vantage_point_balance,json=vantagePointBalance" json:"vantage_point_balance,omitempty"`
	Confirmed           bool   `protobuf:"varint,6,opt,name=confirmed" json:"confirmed,omitempty"`
}

func (m *LolUser) Reset()                    { *m = LolUser{} }
func (m *LolUser) String() string            { return proto.CompactTextString(m) }
func (*LolUser) ProtoMessage()               {}
func (*LolUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LolUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LolUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *LolUser) GetSummonerId() string {
	if m != nil {
		return m.SummonerId
	}
	return ""
}

func (m *LolUser) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *LolUser) GetVantagePointBalance() int64 {
	if m != nil {
		return m.VantagePointBalance
	}
	return 0
}

func (m *LolUser) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

type LolUserRequest struct {
	LolUser *LolUser `protobuf:"bytes,1,opt,name=lol_user,json=lolUser" json:"lol_user,omitempty"`
}

func (m *LolUserRequest) Reset()                    { *m = LolUserRequest{} }
func (m *LolUserRequest) String() string            { return proto.CompactTextString(m) }
func (*LolUserRequest) ProtoMessage()               {}
func (*LolUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LolUserRequest) GetLolUser() *LolUser {
	if m != nil {
		return m.LolUser
	}
	return nil
}

type ListLolUsersRequest struct {
	UserId      string  `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SummonerIds []int64 `protobuf:"varint,2,rep,packed,name=summoner_ids,json=summonerIds" json:"summoner_ids,omitempty"`
	Region      string  `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
}

func (m *ListLolUsersRequest) Reset()                    { *m = ListLolUsersRequest{} }
func (m *ListLolUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListLolUsersRequest) ProtoMessage()               {}
func (*ListLolUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListLolUsersRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListLolUsersRequest) GetSummonerIds() []int64 {
	if m != nil {
		return m.SummonerIds
	}
	return nil
}

func (m *ListLolUsersRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type LolUserResponse struct {
	LolUser *LolUser `protobuf:"bytes,1,opt,name=lol_user,json=lolUser" json:"lol_user,omitempty"`
}

func (m *LolUserResponse) Reset()                    { *m = LolUserResponse{} }
func (m *LolUserResponse) String() string            { return proto.CompactTextString(m) }
func (*LolUserResponse) ProtoMessage()               {}
func (*LolUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LolUserResponse) GetLolUser() *LolUser {
	if m != nil {
		return m.LolUser
	}
	return nil
}

type LolUsersResponse struct {
	LolUsers []*LolUser `protobuf:"bytes,1,rep,name=lol_users,json=lolUsers" json:"lol_users,omitempty"`
}

func (m *LolUsersResponse) Reset()                    { *m = LolUsersResponse{} }
func (m *LolUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*LolUsersResponse) ProtoMessage()               {}
func (*LolUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LolUsersResponse) GetLolUsers() []*LolUser {
	if m != nil {
		return m.LolUsers
	}
	return nil
}

type VantagePointsRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Amount   int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Absolute bool   `protobuf:"varint,3,opt,name=absolute" json:"absolute,omitempty"`
}

func (m *VantagePointsRequest) Reset()                    { *m = VantagePointsRequest{} }
func (m *VantagePointsRequest) String() string            { return proto.CompactTextString(m) }
func (*VantagePointsRequest) ProtoMessage()               {}
func (*VantagePointsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VantagePointsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *VantagePointsRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *VantagePointsRequest) GetAbsolute() bool {
	if m != nil {
		return m.Absolute
	}
	return false
}

func init() {
	proto.RegisterType((*SimpleResponse)(nil), "lolusers.SimpleResponse")
	proto.RegisterType((*CrawlSummonersRequest)(nil), "lolusers.CrawlSummonersRequest")
	proto.RegisterType((*LolUser)(nil), "lolusers.LolUser")
	proto.RegisterType((*LolUserRequest)(nil), "lolusers.LolUserRequest")
	proto.RegisterType((*ListLolUsersRequest)(nil), "lolusers.ListLolUsersRequest")
	proto.RegisterType((*LolUserResponse)(nil), "lolusers.LolUserResponse")
	proto.RegisterType((*LolUsersResponse)(nil), "lolusers.LolUsersResponse")
	proto.RegisterType((*VantagePointsRequest)(nil), "lolusers.VantagePointsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LolUsers service

type LolUsersClient interface {
	// CrawlSummoners takes a list of summoner ids and submits Summoner Crawl
	// messages to pubsub assuming one hasn't been submitted for the summoner
	// id in the last 20 minutes
	CrawlSummoners(ctx context.Context, in *CrawlSummonersRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// Create saves a brand new LolUser to gcd that is mapped to users with
	// a user id, any updates to the LolUser from then on will be done with
	// the Update method
	Create(ctx context.Context, in *LolUserRequest, opts ...grpc.CallOption) (*LolUserResponse, error)
	// Update will update an LolUser based on what information
	// is contained in the request
	Update(ctx context.Context, in *LolUserRequest, opts ...grpc.CallOption) (*LolUserResponse, error)
	// List returns a list of lolusers given a summoner id,
	// user id, and/or region
	List(ctx context.Context, in *ListLolUsersRequest, opts ...grpc.CallOption) (*LolUsersResponse, error)
	// AdjustVantagePoints adds to the vantage point balance of
	// the loluser, only be can be done by someone with LolAdmin rights
	AdjustVantagePoints(ctx context.Context, in *VantagePointsRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type lolUsersClient struct {
	cc *grpc.ClientConn
}

func NewLolUsersClient(cc *grpc.ClientConn) LolUsersClient {
	return &lolUsersClient{cc}
}

func (c *lolUsersClient) CrawlSummoners(ctx context.Context, in *CrawlSummonersRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/lolusers.LolUsers/CrawlSummoners", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolUsersClient) Create(ctx context.Context, in *LolUserRequest, opts ...grpc.CallOption) (*LolUserResponse, error) {
	out := new(LolUserResponse)
	err := grpc.Invoke(ctx, "/lolusers.LolUsers/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolUsersClient) Update(ctx context.Context, in *LolUserRequest, opts ...grpc.CallOption) (*LolUserResponse, error) {
	out := new(LolUserResponse)
	err := grpc.Invoke(ctx, "/lolusers.LolUsers/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolUsersClient) List(ctx context.Context, in *ListLolUsersRequest, opts ...grpc.CallOption) (*LolUsersResponse, error) {
	out := new(LolUsersResponse)
	err := grpc.Invoke(ctx, "/lolusers.LolUsers/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lolUsersClient) AdjustVantagePoints(ctx context.Context, in *VantagePointsRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/lolusers.LolUsers/AdjustVantagePoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LolUsers service

type LolUsersServer interface {
	// CrawlSummoners takes a list of summoner ids and submits Summoner Crawl
	// messages to pubsub assuming one hasn't been submitted for the summoner
	// id in the last 20 minutes
	CrawlSummoners(context.Context, *CrawlSummonersRequest) (*SimpleResponse, error)
	// Create saves a brand new LolUser to gcd that is mapped to users with
	// a user id, any updates to the LolUser from then on will be done with
	// the Update method
	Create(context.Context, *LolUserRequest) (*LolUserResponse, error)
	// Update will update an LolUser based on what information
	// is contained in the request
	Update(context.Context, *LolUserRequest) (*LolUserResponse, error)
	// List returns a list of lolusers given a summoner id,
	// user id, and/or region
	List(context.Context, *ListLolUsersRequest) (*LolUsersResponse, error)
	// AdjustVantagePoints adds to the vantage point balance of
	// the loluser, only be can be done by someone with LolAdmin rights
	AdjustVantagePoints(context.Context, *VantagePointsRequest) (*SimpleResponse, error)
}

func RegisterLolUsersServer(s *grpc.Server, srv LolUsersServer) {
	s.RegisterService(&_LolUsers_serviceDesc, srv)
}

func _LolUsers_CrawlSummoners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlSummonersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolUsersServer).CrawlSummoners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolusers.LolUsers/CrawlSummoners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolUsersServer).CrawlSummoners(ctx, req.(*CrawlSummonersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LolUsers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LolUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolUsersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolusers.LolUsers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolUsersServer).Create(ctx, req.(*LolUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LolUsers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LolUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolUsersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolusers.LolUsers/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolUsersServer).Update(ctx, req.(*LolUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LolUsers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLolUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolUsersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolusers.LolUsers/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolUsersServer).List(ctx, req.(*ListLolUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LolUsers_AdjustVantagePoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VantagePointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LolUsersServer).AdjustVantagePoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lolusers.LolUsers/AdjustVantagePoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LolUsersServer).AdjustVantagePoints(ctx, req.(*VantagePointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LolUsers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lolusers.LolUsers",
	HandlerType: (*LolUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrawlSummoners",
			Handler:    _LolUsers_CrawlSummoners_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LolUsers_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LolUsers_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LolUsers_List_Handler,
		},
		{
			MethodName: "AdjustVantagePoints",
			Handler:    _LolUsers_AdjustVantagePoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lolusers.proto",
}

func init() { proto.RegisterFile("lolusers.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x25, 0xc9, 0x48, 0xd3, 0x5b, 0x14, 0x86, 0xcb, 0x86, 0xa9, 0x80, 0x95, 0x3c, 0xf5, 0x01,
	0xf5, 0xa1, 0xbc, 0x33, 0xb1, 0x3e, 0x4d, 0x1a, 0x12, 0x64, 0xda, 0x5e, 0x23, 0xb7, 0xf6, 0x26,
	0x23, 0xc7, 0x0e, 0xb6, 0x03, 0xbf, 0x8e, 0x5f, 0xc5, 0x1f, 0x40, 0x49, 0x9c, 0x8f, 0xae, 0x15,
	0x08, 0xf1, 0xd6, 0xfb, 0x75, 0x7c, 0xce, 0xb9, 0xb7, 0x81, 0x58, 0x28, 0x51, 0x1a, 0xa6, 0xcd,
	0xb2, 0xd0, 0xca, 0x2a, 0x14, 0xb5, 0x71, 0x72, 0x0c, 0xf1, 0x35, 0xcf, 0x0b, 0xc1, 0x52, 0x66,
	0x0a, 0x25, 0x0d, 0x4b, 0x6e, 0xe1, 0x64, 0xad, 0xc9, 0x0f, 0x71, 0x5d, 0xe6, 0xb9, 0x92, 0x4c,
	0x9b, 0x94, 0x7d, 0x2b, 0x99, 0xb1, 0xe8, 0x2d, 0x3c, 0x31, 0x2e, 0x97, 0x71, 0x6a, 0xb0, 0x37,
	0x0f, 0x16, 0x41, 0x3a, 0x69, 0x73, 0x97, 0xd4, 0xa0, 0x19, 0x44, 0x85, 0x20, 0xf6, 0x4e, 0xe9,
	0x1c, 0xfb, 0x73, 0x6f, 0x31, 0x4e, 0xbb, 0x38, 0xf9, 0xe9, 0xc1, 0xe8, 0x4a, 0x89, 0x1b, 0xc3,
	0x34, 0x8a, 0xc1, 0xe7, 0x14, 0x7b, 0x75, 0x87, 0xcf, 0x29, 0x7a, 0x01, 0xa3, 0x8a, 0x4e, 0xc6,
	0xa9, 0x1b, 0x0b, 0xab, 0xf0, 0x92, 0xa2, 0x33, 0x98, 0x0c, 0xde, 0xc4, 0x41, 0x5d, 0x84, 0xfe,
	0x49, 0x74, 0x0a, 0xa1, 0x66, 0xf7, 0x5c, 0x49, 0x7c, 0xd4, 0x0c, 0x36, 0x11, 0x5a, 0xc1, 0xc9,
	0x77, 0x22, 0x2d, 0xb9, 0x67, 0x59, 0xa1, 0xb8, 0xb4, 0xd9, 0x86, 0x08, 0x22, 0xb7, 0x0c, 0x3f,
	0x9e, 0x7b, 0x8b, 0x20, 0x9d, 0xba, 0xe2, 0xe7, 0xaa, 0x76, 0xd1, 0x94, 0xd0, 0x2b, 0x18, 0x6f,
	0x95, 0xbc, 0xe3, 0x3a, 0x67, 0x14, 0x87, 0x73, 0x6f, 0x11, 0xa5, 0x7d, 0x22, 0xf9, 0x00, 0xb1,
	0xa3, 0xdf, 0x1a, 0xf2, 0x0e, 0x2a, 0x1f, 0xb3, 0x8a, 0x6a, 0xad, 0x65, 0xb2, 0x7a, 0xb6, 0xec,
	0x8c, 0x6e, 0x7b, 0x47, 0xa2, 0xf9, 0x91, 0x70, 0x98, 0x5e, 0x71, 0x63, 0x5d, 0xbe, 0x73, 0x75,
	0x20, 0xdd, 0xdb, 0x91, 0xfe, 0xd0, 0x6e, 0x7f, 0xdf, 0xee, 0x5e, 0x7c, 0x30, 0x14, 0x9f, 0x9c,
	0xc3, 0xd3, 0x8e, 0x6a, 0xb3, 0xd5, 0x7f, 0xe4, 0x7a, 0x01, 0xc7, 0x3d, 0x4f, 0x87, 0xb0, 0x84,
	0x71, 0x8b, 0xd0, 0xec, 0xfe, 0x20, 0x44, 0xe4, 0x20, 0x4c, 0xb2, 0x85, 0xe7, 0xb7, 0x03, 0x93,
	0xff, 0x2e, 0xf8, 0x14, 0x42, 0x92, 0xab, 0x52, 0xda, 0xfa, 0x06, 0x82, 0xd4, 0x45, 0xd5, 0x51,
	0x91, 0x8d, 0x51, 0xa2, 0xb4, 0xac, 0xd6, 0x19, 0xa5, 0x5d, 0xbc, 0xfa, 0xe5, 0x43, 0xd4, 0x32,
	0x45, 0x9f, 0x20, 0xde, 0xbd, 0x5c, 0x74, 0xd6, 0x13, 0x3c, 0x78, 0xd3, 0x33, 0xdc, 0x37, 0x3c,
	0xf8, 0x1b, 0x3c, 0x42, 0xe7, 0x10, 0xae, 0x35, 0x23, 0x96, 0x21, 0xbc, 0xaf, 0xd3, 0xcd, 0xbf,
	0x3c, 0x50, 0x19, 0x02, 0xdc, 0x14, 0xf4, 0x3f, 0x00, 0xd6, 0x70, 0x54, 0x9d, 0x0c, 0x7a, 0x3d,
	0x68, 0xda, 0x3f, 0xa1, 0xd9, 0x6c, 0x0f, 0xc3, 0x0c, 0x40, 0xbe, 0xc0, 0xf4, 0x23, 0xfd, 0x5a,
	0x1a, 0xbb, 0xb3, 0x0d, 0xf4, 0xa6, 0x1f, 0x3a, 0xb4, 0xa6, 0x3f, 0x39, 0xb3, 0x09, 0xeb, 0xaf,
	0xc8, 0xfb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0xda, 0xa1, 0x91, 0x57, 0x04, 0x00, 0x00,
}
